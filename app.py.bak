# app.py

# Consolog: M√É G·ªêC, ƒê√É T√ÅCH PH·∫¶N MINI CHAT SANG FILE mini_chat.py
# Consolog: Gi·ªØ nguy√™n c√°c ph·∫ßn kh√°c ƒë·ªÉ tr√°nh l·ªói ngo√†i √Ω mu·ªën.

import os
import time
import shutil
import subprocess
import asyncio
import math
import ctypes
import threading
import re
import random
import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from tkinter import ttk
import tkinter.font as tkFont

from telethon.sync import TelegramClient
from telethon import functions, types, events
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, PhoneCodeExpiredError

import requests
from distutils.version import LooseVersion

# Th∆∞ vi·ªán ƒë·ªÉ chuy·ªÉn v√†o Th√πng r√°c
try:
    from send2trash import send2trash
except ImportError:
    send2trash = None

# Th∆∞ vi·ªán ki·ªÉm tra ti·∫øn tr√¨nh c√≤n ch·∫°y hay kh√¥ng
try:
    import psutil
except ImportError:
    psutil = None

# Th√™m th∆∞ vi·ªán Pillow ƒë·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh
from PIL import Image, ImageChops, ImageTk

# C·∫ßn d√πng ctypes.wintypes ƒë·ªÉ l·∫•y t·ªça ƒë·ªô c·ª≠a s·ªï
from ctypes import wintypes

# Import module AutoIT ƒë√£ t√°ch ri√™ng
from autoit_module import auto_it_function

# ===== TH√äM TH∆Ø VI·ªÜN B·ªî SUNG CHO MINI CHAT =====
# Consolog: ƒê√£ chuy·ªÉn c√°c import mini chat sang mini_chat.py

# NEW: Gi·ªØ l·∫°i ph·∫ßn config key ChatGPT ƒë·ªÉ open_settings() c√≥ th·ªÉ truy c·∫≠p
CHATGPT_API_KEY_FILE = "chatgpt_api_key.txt"
def load_chatgpt_api_key():
    if os.path.exists(CHATGPT_API_KEY_FILE):
        with open(CHATGPT_API_KEY_FILE, "r", encoding="utf-8") as f:
            return f.read().strip()
    return ""

def save_chatgpt_api_key(key):
    with open(CHATGPT_API_KEY_FILE, "w", encoding="utf-8") as f:
        f.write(key)

# Consolog: Gi·ªØ c√°c bi·∫øn n√†y ·ªü app.py v√¨ open_settings() c≈©ng c·∫ßn
CHATGPT_API_KEY = load_chatgpt_api_key()

# NEW: Bi·∫øn ki·ªÉm tra ch·∫ø ƒë·ªô ch·ªâ d·ªãch (kh√¥ng g·ª≠i tin nh·∫Øn)
TRANSLATION_ONLY = True
print("Consolog: Ch·∫ø ƒë·ªô 'ch·ªâ d·ªãch' ƒë∆∞·ª£c b·∫≠t (TRANSLATION_ONLY=True).")

# NEW: Bi·∫øn m·∫∑c ƒë·ªãnh cho ng√¥n ng·ªØ d·ªãch c·ªßa ƒë·ªëi ph∆∞∆°ng (default l√† ti·∫øng Vi·ªát)
DEFAULT_TARGET_LANG = "vi"

# --- C·∫§U H√åNH BAN ƒê·∫¶U (DEFAULT) ---
CONFIG_FILE = "config.txt"
DEFAULT_TELEGRAM_PATH = r"C:\Users\SAM\AppData\Roaming\Telegram Desktop\Telegram.exe"
API_ID = 22379547
API_HASH = '9fc2845bde4b64a6a51320a8045c8178'
CURRENT_VERSION = "1.05"
GITHUB_USER = "nunerit"
GITHUB_REPO = "TelegramAuto"

VERSION_INFO = "Version 1.0.5 - Copyright SAMADS"

# File l∆∞u k√≠ch th∆∞·ªõc c·ª≠a s·ªï
WINDOW_SIZE_FILE = "window_size.txt"

# --- C·∫§U H√åNH CHO MARKER IMAGE ---
MARKER_IMAGE_PATH = os.path.join(os.getcwd(), "marker_image.png")
MARKER_CONFIG_FILE = os.path.join(os.getcwd(), "marker_config.txt")  # V·∫´n gi·ªØ l·∫°i n·∫øu c·∫ßn

# C√°c gi√° tr·ªã c·∫•u h√¨nh cho s·∫Øp x·∫øp c·ª≠a s·ªï (Custom Width/Height)
arrange_width = 500
arrange_height = 504

##########################################################################
# B·ªî SUNG: H√†m l·∫•y HWND theo PID ƒë·ªÉ ch·ª•p ch√≠nh x√°c c·ª≠a s·ªï Telegram
##########################################################################
user32 = ctypes.windll.user32

def get_window_handle_by_pid(pid):
    handles = []
    @ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.c_int, ctypes.c_int)
    def enum_callback(hwnd, lParam):
        if user32.IsWindow(hwnd) and user32.IsWindowVisible(hwnd):
            window_pid = wintypes.DWORD()
            user32.GetWindowThreadProcessId(hwnd, ctypes.byref(window_pid))
            if window_pid.value == pid:
                handles.append(hwnd)
        return True
    user32.EnumWindows(enum_callback, 0)
    if handles:
        return handles[0]
    return None

##########################################################################
# S·ª¨A: H√†m capture_window ƒë·ªÉ ch·ª•p full content (PrintWindow(hwnd, srcdc, 2))
##########################################################################
def capture_window(hwnd):
    gdi32 = ctypes.windll.gdi32
    rect = wintypes.RECT()
    user32.GetWindowRect(hwnd, ctypes.byref(rect))
    width = rect.right - rect.left
    height = rect.bottom - rect.top
    hwindc = user32.GetWindowDC(hwnd)
    srcdc = gdi32.CreateCompatibleDC(hwindc)
    bmp = gdi32.CreateCompatibleBitmap(hwindc, width, height)
    gdi32.SelectObject(srcdc, bmp)
    result = user32.PrintWindow(hwnd, srcdc, 2)
    if result != 1:
        print("Consolog [WARNING]: PrintWindow kh√¥ng th√†nh c√¥ng ho·∫∑c ch·ªâ ch·ª•p ƒë∆∞·ª£c 1 ph·∫ßn.")

    class BITMAPINFOHEADER(ctypes.Structure):
        _fields_ = [
            ("biSize", ctypes.c_uint32),
            ("biWidth", ctypes.c_int32),
            ("biHeight", ctypes.c_int32),
            ("biPlanes", ctypes.c_uint16),
            ("biBitCount", ctypes.c_uint16),
            ("biCompression", ctypes.c_uint32),
            ("biSizeImage", ctypes.c_uint32),
            ("biXPelsPerMeter", ctypes.c_int32),
            ("biYPelsPerMeter", ctypes.c_int32),
            ("biClrUsed", ctypes.c_uint32),
            ("biClrImportant", ctypes.c_uint32),
        ]

    bmi = BITMAPINFOHEADER()
    bmi.biSize = ctypes.sizeof(BITMAPINFOHEADER)
    bmi.biWidth = width
    bmi.biHeight = -height
    bmi.biPlanes = 1
    bmi.biBitCount = 32
    bmi.biCompression = 0

    buffer_len = width * height * 4
    buffer = ctypes.create_string_buffer(buffer_len)
    _ = gdi32.GetDIBits(srcdc, bmp, 0, height, buffer, ctypes.byref(bmi), 0)

    from PIL import Image
    image = Image.frombuffer('RGBA', (width, height), buffer, 'raw', 'BGRA', 0, 1)

    gdi32.DeleteObject(bmp)
    gdi32.DeleteDC(srcdc)
    user32.ReleaseDC(hwnd, hwindc)

    return image

languages = {
    "vi": {
        "title": "C√¥ng c·ª• T·ª± ƒë·ªông Telegram TData",
        "choose_folder": "Ch·ªçn th∆∞ m·ª•c",
        "save_path": "üíæ L∆∞u ƒë∆∞·ªùng d·∫´n",
        "login_all": "üîê Telethon",
        "auto_it": "ü§ñ AutoIT",
        "check_live": "üîç Check live",
        "report": "üìù Report",
        "copy_telegram": "üìã Copy Telegram Portable",
        "open_telegram": "üü¢ M·ªü Telegram Copies",
        "close_telegram": "‚ùå ƒê√≥ng All Telegram",
        "arrange_telegram": "üü£ S·∫Øp x·∫øp Telegram",
        "check_update": "üîÑ Check for Updates",
        "stats_label": "B·∫£ng th·ªëng k√™ th∆∞ m·ª•c con:",
        "account_summary": "Th·ªëng k√™ t√†i kho·∫£n:",
        "logged_accounts": "T√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p:",
        "log_label": "Ti·∫øn tr√¨nh:",
        "telegram_path_label": "ƒê∆∞·ªùng d·∫´n Telegram:",
        "lang_select_title": "Ch·ªçn ng√¥n ng·ªØ",
        "lang_vi": "Ti·∫øng Vi·ªát",
        "lang_en": "English",
        "lang_zh": "‰∏≠Êñá",
        "msg_saved_path": "ƒê√£ l∆∞u ƒë∆∞·ªùng d·∫´n v√†o m√°y!",
        "msg_error_path": "ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá!",
        "msg_copy_result": "K·∫øt qu·∫£ Copy",
        "msg_open_result": "K·∫øt qu·∫£ m·ªü Telegram",
        "msg_login_complete": "Qu√° tr√¨nh ƒëƒÉng nh·∫≠p cho t·∫•t c·∫£ c√°c t√†i kho·∫£n ƒë√£ ho√†n t·∫•t.",
        "msg_privacy_complete": "ƒê√£ c·∫≠p nh·∫≠t quy·ªÅn ri√™ng t∆∞ cho t·∫•t c·∫£ c√°c t√†i kho·∫£n.",
        "already_logged": "ƒê√£ c√≥ session",
        "success": "Th√†nh c√¥ng",
        "failure": "Th·∫•t b·∫°i",
        "not_found": "Ch∆∞a c√≥",
        "otp_prompt": "Nh·∫≠p m√£ OTP g·ª≠i t·ªõi {phone}:",
        "phone_prompt": "Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i cho t√†i kho·∫£n ·ªü\n{folder}:",
        "2fa_error": "Kh√¥ng t√¨m th·∫•y m·∫≠t kh·∫©u 2FA t·ª± ƒë·ªông cho {phone}.",
        "copy_success": "Copy telegram.exe th√†nh c√¥ng cho {phone}",
        "copy_skip": "{phone} ƒë√£ c√≥ telegram.exe, b·ªè qua.",
        "close_result": "ƒê√≥ng All Telegram:\nƒê√£ ƒë√≥ng: {closed}\nL·ªói: {errors}",
        "arrange_result": "ƒê√£ s·∫Øp x·∫øp {count} c·ª≠a s·ªï Telegram.",
        "update_available": "Phi√™n b·∫£n {version} c√≥ s·∫µn. B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t kh√¥ng?",
        "no_updates": "B·∫°n ƒë√£ c√≥ phi√™n b·∫£n m·ªõi nh·∫•t.",
        "update_error": "L·ªói ki·ªÉm tra c·∫≠p nh·∫≠t.",
        "create_session": "T·∫°o session",
        "update_privacy": "Thay ƒë·ªïi Quy·ªÅn ri√™ng t∆∞",
        "change_info": "Thay ƒë·ªïi Th√¥ng tin t√†i kho·∫£n",
        "popup_inactive_title": "Danh s√°ch TData ƒë√£ b·ªã log out",
        "popup_inactive_copy": "Copy to√†n b·ªô danh s√°ch",
        "popup_inactive_delete": "X√≥a t·∫•t c·∫£ th∆∞ m·ª•c kh√¥ng ho·∫°t ƒë·ªông",
        "copy_inactive": "Copy Tdata kh√¥ng ho·∫°t ƒë·ªông",
        "delete_inactive": "X√≥a Tdata kh√¥ng ho·∫°t ƒë·ªông",
        "copy_table": "Copy table",
        "processing": "ƒêang x·ª≠ l√Ω",
        "skipped": "B·ªè qua",
        "not_checked": "Ch∆∞a check",
        "checking": "ƒêang check",
        "completed": "Ho√†n th√†nh",
        "exe_not_found": "Kh√¥ng t√¨m th·∫•y exe",
        "not_active": "Kh√¥ng ho·∫°t ƒë·ªông",
        "live": "Live",
        "stt": "STT",
        "check_status": "Tr·∫°ng th√°i check",
        "live_status": "Tr·∫°ng th√°i Live",
        "start": "B·∫Øt ƒë·∫ßu",
        "pause": "T·∫°m d·ª´ng",
        "confirm": "X√°c nh·∫≠n",
        "check_live_title": "Check live - Danh s√°ch TData",
        "login_window_title": "Ti·∫øn tr√¨nh ƒëƒÉng nh·∫≠p",
        "not_started": "Ch∆∞a ch·∫°y",
        "auto_it_in_development": "Ch·ª©c nƒÉng AutoIT ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.",
        "report_in_development": "Ch·ª©c nƒÉng Report ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.",
        "change_info_in_development": "Ch·ª©c nƒÉng thay ƒë·ªïi th√¥ng tin t√†i kho·∫£n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.",
        "telethon_session_title": "Phi√™n Telethon - {phone}",
        "invalid_source_exe": "Source telegram.exe kh√¥ng h·ª£p l·ªá!",
        "close_result_title": "K·∫øt qu·∫£ ƒë√≥ng"
    },
    "en": {
        "title": "Telegram TData Auto Tool",
        "choose_folder": "Choose Folder",
        "save_path": "üíæ Save Path",
        "login_all": "üîê Telethon",
        "auto_it": "ü§ñ AutoIT",
        "check_live": "üîç Check live",
        "report": "üìù Report",
        "copy_telegram": "üìã Copy Telegram Portable",
        "open_telegram": "üü¢ Open Telegram Copies",
        "close_telegram": "‚ùå Close All Telegram",
        "arrange_telegram": "üü£ Arrange Telegram",
        "check_update": "üîÑ Check for Updates",
        "stats_label": "Folder Statistics:",
        "account_summary": "Account Summary:",
        "logged_accounts": "Logged In Accounts:",
        "log_label": "Log:",
        "telegram_path_label": "Telegram Path:",
        "lang_select_title": "Select Language",
        "lang_vi": "Ti·∫øng Vi·ªát",
        "lang_en": "English",
        "lang_zh": "‰∏≠Êñá",
        "msg_saved_path": "Path saved successfully!",
        "msg_error_path": "Invalid path!",
        "msg_copy_result": "Copy Result",
        "msg_open_result": "Telegram Open Result",
        "msg_login_complete": "Login process completed for all accounts.",
        "msg_privacy_complete": "Privacy updated for all accounts.",
        "already_logged": "Already Logged In",
        "success": "Success",
        "failure": "Failure",
        "not_found": "Not Found",
        "otp_prompt": "Enter OTP sent to {phone}:",
        "phone_prompt": "Enter phone number for account in\n{folder}:",
        "2fa_error": "No automatic 2FA password found for {phone}.",
        "copy_success": "Copied telegram.exe successfully for {phone}",
        "copy_skip": "{phone} already has telegram.exe, skipped.",
        "close_result": "Close All Telegram:\nClosed: {closed}\nErrors: {errors}",
        "arrange_result": "Arranged {count} Telegram windows.",
        "update_available": "Version {version} is available. Do you want to update?",
        "no_updates": "You already have the latest version.",
        "update_error": "Error checking for updates.",
        "create_session": "Create Session",
        "update_privacy": "Update Privacy",
        "change_info": "Change Account Info",
        "popup_inactive_title": "Inactive TData Folders",
        "popup_inactive_copy": "Copy All Inactive",
        "popup_inactive_delete": "Delete All Inactive Folders",
        "copy_inactive": "Copy Inactive TData",
        "delete_inactive": "Delete Inactive TData",
        "copy_table": "Copy table",
        "processing": "Processing",
        "skipped": "Skipped",
        "not_checked": "Not checked",
        "checking": "Checking",
        "completed": "Completed",
        "exe_not_found": "Exe not found",
        "not_active": "Not active",
        "live": "Live",
        "stt": "No.",
        "check_status": "Check Status",
        "live_status": "Live Status",
        "start": "Start",
        "pause": "Pause",
        "confirm": "Confirm",
        "check_live_title": "Check live - TData List",
        "login_window_title": "Login Process",
        "not_started": "Not started",
        "auto_it_in_development": "AutoIT feature is under development.",
        "report_in_development": "Report feature is under development.",
        "change_info_in_development": "Change account info feature is under development.",
        "telethon_session_title": "Telethon Session - {phone}",
        "invalid_source_exe": "Invalid source telegram.exe!",
        "close_result_title": "Close Result"
    },
    "zh": {
        "title": "Telegram TData Ëá™Âä®Â∑•ÂÖ∑",
        "choose_folder": "ÈÄâÊã©Êñá‰ª∂Â§π",
        "save_path": "üíæ ‰øùÂ≠òË∑ØÂæÑ",
        "login_all": "üîê Telethon",
        "auto_it": "ü§ñ AutoIT",
        "check_live": "üîç Check live",
        "report": "üìù Report",
        "copy_telegram": "üìã Â§çÂà∂ Telegram Portable",
        "open_telegram": "üü¢ ÊâìÂºÄ Telegram ÂâØÊú¨",
        "close_telegram": "‚ùå ÂÖ≥Èó≠ÊâÄÊúâ Telegram",
        "arrange_telegram": "üü£ ÊéíÂàó Telegram",
        "check_update": "üîÑ Ê£ÄÊü•Êõ¥Êñ∞",
        "stats_label": "Folder Statistics:",
        "account_summary": "Account Summary:",
        "logged_accounts": "Logged In Accounts:",
        "log_label": "Log:",
        "telegram_path_label": "Telegram Path:",
        "lang_select_title": "Select Language",
        "lang_vi": "Ti·∫øng Vi·ªát",
        "lang_en": "English",
        "lang_zh": "‰∏≠Êñá",
        "msg_saved_path": "Path saved successfully!",
        "msg_error_path": "Invalid path!",
        "msg_copy_result": "Copy Result",
        "msg_open_result": "Telegram Open Result",
        "msg_login_complete": "Login process completed for all accounts.",
        "msg_privacy_complete": "Privacy updated for all accounts.",
        "already_logged": "Already Logged In",
        "success": "Success",
        "failure": "Failure",
        "not_found": "Not Found",
        "otp_prompt": "Enter OTP sent to {phone}:",
        "phone_prompt": "Enter phone number for account in\n{folder}:",
        "2fa_error": "No automatic 2FA password found for {phone}.",
        "copy_success": "Copied telegram.exe successfully for {phone}",
        "copy_skip": "{phone} already has telegram.exe, skipped.",
        "close_result": "Close All Telegram:\nClosed: {closed}\nErrors: {errors}",
        "arrange_result": "Arranged {count} Telegram windows.",
        "update_available": "Version {version} is available. Do you want to update?",
        "no_updates": "You already have the latest version.",
        "update_error": "Error checking for updates.",
        "create_session": "Create Session",
        "update_privacy": "Update Privacy",
        "change_info": "Change Account Info",
        "popup_inactive_title": "Inactive TData Folders",
        "popup_inactive_copy": "Copy All Inactive",
        "popup_inactive_delete": "Delete All Inactive Folders",
        "copy_inactive": "Copy Inactive TData",
        "delete_inactive": "Delete Inactive TData",
        "copy_table": "Copy table",
        "processing": "Processing",
        "skipped": "Skipped",
        "not_checked": "Not checked",
        "checking": "Checking",
        "completed": "Completed",
        "exe_not_found": "Exe not found",
        "not_active": "Not active",
        "live": "Live",
        "stt": "No.",
        "check_status": "Check Status",
        "live_status": "Live Status",
        "start": "Start",
        "pause": "Pause",
        "confirm": "Confirm",
        "check_live_title": "Check live - TData List",
        "login_window_title": "ÁôªÂΩïËøõÁ®ã",
        "not_started": "Êú™ÂºÄÂßã",
        "auto_it_in_development": "AutoIT ÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠„ÄÇ",
        "report_in_development": "Êä•ÂëäÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠„ÄÇ",
        "change_info_in_development": "Êõ¥ÊîπË¥¶Êà∑‰ø°ÊÅØÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠„ÄÇ",
        "telethon_session_title": "Telethon‰ºöËØù - {phone}",
        "invalid_source_exe": "Êó†ÊïàÁöÑ telegram.exe Ê∫êÊñá‰ª∂ÔºÅ",
        "close_result_title": "ÂÖ≥Èó≠ÁªìÊûú"
    }
}

lang = {}
successful_sessions = set()

if not psutil:
    print("Consolog: C·∫£nh b√°o - psutil ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t! Vui l√≤ng c√†i b·∫±ng 'pip install psutil' ƒë·ªÉ check live qua PID.")

############################################
# ƒê·ªäNH NGHƒ®A H√ÄM WARN_CHECK_LIVE (KH√îNG B·ªä L·ªñI)
############################################
def warn_check_live():
    warning_msg = (
        "„ÄêTi·∫øng Vi·ªát„Äë: ƒê·ªÉ ƒë·∫£m b·∫£o t√≠nh nƒÉng Check live ho·∫°t ƒë·ªông ch√≠nh x√°c v√† hi·ªáu qu·∫£, vui l√≤ng ƒë√≥ng t·∫•t c·∫£ c√°c phi√™n b·∫£n Telegram ƒëang ch·∫°y tr√™n m√°y t√≠nh c·ªßa b·∫°n. B·∫°n c√≥ mu·ªën ƒë√≥ng ch√∫ng ngay b√¢y gi·ªù?\n"
        "„ÄêEnglish„Äë: To ensure the Check live feature works accurately and efficiently, please close all running Telegram instances on your computer. Would you like to close them now?\n"
        "„Äê‰∏≠Êñá„Äë: ‰∏∫‰∫ÜÁ°Æ‰øù 'Check live' ÂäüËÉΩÂáÜÁ°ÆÈ´òÊïàÂú∞ËøêË°åÔºåËØ∑ÂÖ≥Èó≠ÊÇ®ÁîµËÑë‰∏äÊâÄÊúâÊ≠£Âú®ËøêË°åÁöÑ Telegram Á®ãÂ∫è„ÄÇÊÇ®ÊòØÂê¶Â∏åÊúõÁ´ãÂç≥ÂÖ≥Èó≠ÂÆÉ‰ª¨Ôºü"
    )
    res = messagebox.askyesno("C·∫£nh b√°o", warning_msg)
    if res:
        close_all_telegram_threaded()
    check_live_window()

############################################
# H√ÄM KI·ªÇM TRA SESSION ƒê√É ·ª¶Y QUY·ªÄN CH∆ØA
############################################
async def check_authorization(session_path, phone):
    print(f"Consolog: Ki·ªÉm tra authorization cho {phone} t·ª´ session: {session_path}")
    client = TelegramClient(session_path, API_ID, API_HASH)
    try:
        await client.connect()
        authorized = await client.is_user_authorized()
        await client.disconnect()
        print(f"Consolog: Authorization cho {phone}: {authorized}")
        return authorized
    except Exception as e:
        print(f"Consolog [ERROR]: L·ªói ki·ªÉm tra authorization cho {phone}: {e}")
        return False

############################################
# H√ÄM T·ª∞ ƒê√ìNG TELEGRAM
############################################
def auto_close_telegram():
    print("Consolog: ƒêang l·∫•y danh s√°ch ti·∫øn tr√¨nh Telegram...")
    try:
        result = subprocess.run(
            ["tasklist", "/FI", "IMAGENAME eq Telegram.exe", "/FO", "CSV"],
            capture_output=True, text=True
        )
        output = result.stdout.strip().splitlines()
        pids = []
        for line in output[1:]:
            parts = line.replace('"', '').split(',')
            if len(parts) >= 2:
                pid = parts[1].strip()
                pids.append(pid)
                print(f"Consolog: T√¨m th·∫•y ti·∫øn tr√¨nh Telegram v·ªõi PID: {pid}")
        for pid in pids:
            print(f"Consolog: ƒêang ƒë√≥ng ti·∫øn tr√¨nh v·ªõi PID: {pid}")
            subprocess.run(["taskkill", "/F", "/PID", pid], capture_output=True, text=True)
            time.sleep(1)
        while True:
            result = subprocess.run(
                ["tasklist", "/FI", "IMAGENAME eq Telegram.exe", "/FO", "CSV"],
                capture_output=True, text=True
            )
            lines = result.stdout.strip().splitlines()
            if len(lines) <= 1:
                print("Consolog: T·∫•t c·∫£ ti·∫øn tr√¨nh Telegram ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.")
                break
            print("Consolog: V·∫´n c√≤n ti·∫øn tr√¨nh Telegram, ch·ªù 1 gi√¢y...")
            time.sleep(1)
        return True
    except Exception as e:
        print(f"Consolog [ERROR]: L·ªói khi t·ª± ƒë·ªông t·∫Øt Telegram: {e}")
        return False

def close_all_telegram_threaded():
    threading.Thread(target=close_all_telegram, daemon=True).start()

############################################
# PH·∫¶N NH·∫¨P OTP
############################################
def get_otp(phone):
    print(f"Consolog: Y√™u c·∫ßu nh·∫≠p OTP cho {phone}")
    otp_result = [None]
    event = threading.Event()
    def ask():
        otp_result[0] = simpledialog.askstring("OTP", lang["otp_prompt"].format(phone=phone), parent=root)
        print(f"Consolog: OTP ƒë√£ ƒë∆∞·ª£c nh·∫≠p: {otp_result[0]}")
        event.set()
    root.after(0, ask)
    event.wait()
    return otp_result[0]

############################################
# PARSE 2FA: L·∫§Y FILE CH·ª®A M·∫¨T KH·∫®U
############################################
def parse_2fa_info(tdata_folder):
    print(f"Consolog: ƒêang parse th√¥ng tin 2FA t·ª´ folder: {tdata_folder}")
    for root_dir, dirs, files in os.walk(tdata_folder):
        for file in files:
            if file.lower().endswith('.txt') and "2fa" in file.lower():
                path = os.path.join(root_dir, file)
                print(f"Consolog: Ki·ªÉm tra candidate 2FA file: {path}")
                try:
                    with open(path, "r", encoding="utf-8-sig") as f:
                        lines = [line.strip() for line in f if line.strip()]
                    if len(lines) == 1:
                        print(f"Consolog: T√¨m th·∫•y m·∫≠t kh·∫©u 2FA: {lines[0]}")
                        return {"password": lines[0]}
                    else:
                        print(f"Consolog: File {path} ch·ª©a {len(lines)} d√≤ng, kh√¥ng h·ª£p l·ªá")
                except Exception as e:
                    print(f"Consolog [ERROR]: L·ªói ƒë·ªçc file {path}: {e}")
    for root_dir, dirs, files in os.walk(tdata_folder):
        for file in files:
            if file.lower().endswith('.txt') and "2fa" not in file.lower():
                path = os.path.join(root_dir, file)
                print(f"Consolog: Ki·ªÉm tra candidate file: {path}")
                try:
                    with open(path, "r", encoding="utf-8-sig") as f:
                        lines = [line.strip() for line in f if line.strip()]
                    if len(lines) == 1:
                        print(f"Consolog: T√¨m th·∫•y m·∫≠t kh·∫©u: {lines[0]}")
                        return {"password": lines[0]}
                    else:
                        print(f"Consolog: File {path} ch·ª©a {len(lines)} d√≤ng, kh√¥ng h·ª£p l·ªá")
                except Exception as e:
                    print(f"Consolog [ERROR]: L·ªói ƒë·ªçc file {path}: {e}")
    return {}

############################################
# H√ÄM D·ªåN D·∫∏P SESSION
############################################
def cleanup_session_files(session_base):
    session_file = session_base + ".session"
    print(f"Consolog: ƒêang d·ªçn d·∫πp session t·ª´: {session_base}")
    if os.path.exists(session_file):
        try:
            os.remove(session_file)
            print(f"Consolog: ƒê√£ x√≥a file session {session_file}")
        except Exception as e:
            print(f"Consolog [ERROR]: L·ªói x√≥a file session {session_file}: {e}")
    if os.path.exists(session_base) and os.path.isdir(session_base):
        try:
            shutil.rmtree(session_base)
            print(f"Consolog: ƒê√£ x√≥a th∆∞ m·ª•c session {session_base}")
        except Exception as e:
            print(f"Consolog [ERROR]: L·ªói x√≥a th∆∞ m·ª•c {session_base}: {e}")

def delete_all_sessions():
    tdata_dir = ""
    try:
        tdata_dir = entry_path.get()
    except:
        pass
    if not os.path.exists(tdata_dir):
        messagebox.showerror("L·ªói", lang["msg_error_path"])
        return
    tdata_folders = get_tdata_folders(tdata_dir)
    deleted_accounts = []
    for folder in tdata_folders:
        session_folder = os.path.join(folder, "session")
        session_file = os.path.join(folder, "session.session")
        if os.path.exists(session_file):
            try:
                os.remove(session_file)
                print(f"Consolog: ƒê√£ x√≥a file session {session_file}")
            except Exception as e:
                print(f"Consolog [ERROR]: L·ªói x√≥a file {session_file}: {e}")
        if os.path.exists(session_folder) and os.path.isdir(session_folder):
            try:
                shutil.rmtree(session_folder)
                print(f"Consolog: ƒê√£ x√≥a th∆∞ m·ª•c session {session_folder}")
            except Exception as e:
                print(f"Consolog [ERROR]: L·ªói x√≥a th∆∞ m·ª•c {session_folder}: {e}")
        deleted_accounts.append(os.path.basename(folder))
    messagebox.showinfo(lang["popup_inactive_title"], "ƒê√£ x√≥a session c·ªßa c√°c t√†i kho·∫£n: " + ", ".join(deleted_accounts))
    update_logged()

# =====================================================================
# UPDATE PROCESS: KI·ªÇM TRA & T·∫¢I C·∫¨P NH·∫¨T
# =====================================================================

def check_for_updates():
    print("Consolog: Ki·ªÉm tra c·∫≠p nh·∫≠t phi√™n b·∫£n...")
    try:
        url = f"https://api.github.com/repos/{GITHUB_USER}/{GITHUB_REPO}/releases/latest"
        response = requests.get(url)
        if response.status_code == 200:
            release_info = response.json()
            latest_version = release_info["tag_name"].lstrip("v")
            print(f"Consolog: Phi√™n b·∫£n m·ªõi nh·∫•t t·ª´ GitHub: {latest_version}")
            if LooseVersion(latest_version) > LooseVersion(CURRENT_VERSION):
                if messagebox.askyesno("C·∫≠p nh·∫≠t", lang.get("update_available", "Phi√™n b·∫£n {version} c√≥ s·∫µn. B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t kh√¥ng?").format(version=latest_version)):
                    print("Consolog [UPDATE]: Ng∆∞·ªùi d√πng ch·ªçn c·∫≠p nh·∫≠t phi√™n b·∫£n m·ªõi.")
                    assets = release_info.get("assets", [])
                    download_url = None
                    for asset in assets:
                        if asset["name"].lower().endswith(".exe"):
                            download_url = asset["browser_download_url"]
                            break
                    if not download_url and assets:
                        download_url = assets[0]["browser_download_url"]
                    if download_url:
                        print(f"Consolog [UPDATE]: B·∫Øt ƒë·∫ßu t·∫£i file c·∫≠p nh·∫≠t t·ª´ {download_url}")
                        download_update_with_progress(download_url)
                    else:
                        messagebox.showerror("Error", "Kh√¥ng t√¨m th·∫•y file c·∫≠p nh·∫≠t tr√™n GitHub.")
                        print("Consolog [UPDATE ERROR]: Kh√¥ng t√¨m th·∫•y asset c·∫≠p nh·∫≠t.")
                else:
                    print("Consolog [UPDATE]: Ng∆∞·ªùi d√πng kh√¥ng c·∫≠p nh·∫≠t.")
            else:
                print("Consolog: B·∫°n ƒëang d√πng phi√™n b·∫£n m·ªõi nh·∫•t.")
        else:
            print("Consolog: L·ªói ki·ªÉm tra c·∫≠p nh·∫≠t.")
    except Exception as e:
        print(f"Consolog [ERROR]: L·ªói ki·ªÉm tra c·∫≠p nh·∫≠t: {e}")

def download_update_with_progress(download_url):
    local_filename = download_url.split("/")[-1]
    print(f"Consolog [UPDATE]: ƒêang t·∫£i xu·ªëng file: {local_filename}")

    progress_win = tk.Toplevel(root)
    progress_win.title("ƒêang t·∫£i c·∫≠p nh·∫≠t")
    # C√†i ƒë·∫∑t k√≠ch th∆∞·ªõc c·ª≠a s·ªï c·∫≠p nh·∫≠t
    progress_win.geometry("550x130")

    # T·∫°o style t√πy ch·ªânh cho progress bar v·ªõi ƒë·ªô d√†y mong mu·ªën
    style = ttk.Style(progress_win)
    style.configure("Custom.Horizontal.TProgressbar", troughcolor="white", background="blue", thickness=20)

    tk.Label(progress_win, text=f"ƒêang t·∫£i: {local_filename}").pack(pady=5)

    progress_var = tk.DoubleVar(value=0)
    progress_bar = ttk.Progressbar(progress_win, variable=progress_var, maximum=100, length=500, style="Custom.Horizontal.TProgressbar")
    progress_bar.pack(pady=5)

    percent_label = tk.Label(progress_win, text="0%")
    percent_label.pack(pady=5)
    progress_win.update()

    try:
        response = requests.get(download_url, stream=True)
        total_length = response.headers.get('content-length')
        if total_length is None:
            messagebox.showerror("Error", "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c k√≠ch th∆∞·ªõc file c·∫≠p nh·∫≠t.")
            print("Consolog [UPDATE ERROR]: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c content-length.")
            progress_win.destroy()
            return
        total_length = int(total_length)
        downloaded = 0
        with open(local_filename, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    percent = (downloaded / total_length) * 100
                    progress_var.set(percent)
                    percent_label.config(text=f"{int(percent)}%")
                    progress_win.update_idletasks()

        progress_win.destroy()

        notify_win = tk.Toplevel(root)
        notify_win.title("T·∫£i c·∫≠p nh·∫≠t th√†nh c√¥ng")
        tk.Label(notify_win, text=f"ƒê√£ t·∫£i xong {local_filename}").pack(pady=10)

        def open_update_folder():
            folder = os.path.abspath(os.getcwd())
            try:
                os.startfile(folder)
            except Exception as e:
                messagebox.showerror("Error", f"L·ªói m·ªü th∆∞ m·ª•c: {e}")

        tk.Button(notify_win, text="M·ªü v·ªã tr√≠ file c·∫≠p nh·∫≠t", command=open_update_folder).pack(pady=5)
        tk.Button(notify_win, text="Close", command=notify_win.destroy).pack(pady=5)
        print("Consolog [UPDATE]: T·∫£i v·ªÅ c·∫≠p nh·∫≠t ho√†n t·∫•t.")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to download update: {e}")
        print(f"Consolog [UPDATE ERROR]: L·ªói t·∫£i c·∫≠p nh·∫≠t: {e}")
        progress_win.destroy()

############################################
# H√ÄM S·∫ÆP X·∫æP C·ª¨A S·ªî TELEGRAM KI·ªÇU MA TR·∫¨N
############################################
def arrange_telegram_windows(custom_width=500, custom_height=504, for_check_live=False):
    print(f"Consolog: [CHANGE] S·∫Øp x·∫øp c·ª≠a s·ªï Telegram (m√°i ng√≥i) v·ªõi k√≠ch th∆∞·ªõc {custom_width}x{custom_height}... For check live: {for_check_live}")
    my_hwnd = root.winfo_id()
    handles = []
    seen_pids = set()

    @ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.c_int, ctypes.c_int)
    def enum_callback(hwnd, lParam):
        if hwnd == my_hwnd:
            return True
        if user32.IsWindowVisible(hwnd):
            length = user32.GetWindowTextLengthW(hwnd)
            buff = ctypes.create_unicode_buffer(length + 1)
            user32.GetWindowTextW(hwnd, buff, length + 1)
            pid = ctypes.c_ulong()
            user32.GetWindowThreadProcessId(hwnd, ctypes.byref(pid))
            process_name = ""
            try:
                if psutil:
                    process = psutil.Process(pid.value)
                    process_name = process.name()
            except:
                pass
            if process_name.lower() == "telegram.exe":
                if for_check_live:
                    # Consolog: [CHANGE] Kh√¥ng lo·∫°i tr·ª´ c√°c c·ª≠a s·ªï c√πng PID khi check live
                    handles.append(hwnd)
                    print(f"Consolog: [CHANGE] Th√™m c·ª≠a s·ªï HWND {hwnd} t·ª´ PID {pid.value} (check live mode)")
                else:
                    if pid.value not in seen_pids:
                        seen_pids.add(pid.value)
                        handles.append(hwnd)
                        print(f"Consolog: [CHANGE] Th√™m c·ª≠a s·ªï HWND {hwnd} t·ª´ PID {pid.value}")
        return True

    user32.EnumWindows(enum_callback, 0)
    n = len(handles)
    print(f"Consolog: [CHANGE] T√¨m th·∫•y {n} c·ª≠a s·ªï Telegram.")
    if n == 0:
        messagebox.showinfo("Arrange", "Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï Telegram n√†o.")
        return

    screen_width = user32.GetSystemMetrics(0)
    screen_height = user32.GetSystemMetrics(1)
    max_cols = screen_width // custom_width
    max_rows = screen_height // custom_height
    if max_cols < 1:
        max_cols = 1
    if max_rows < 1:
        max_rows = 1
    capacity = max_cols * max_rows
    SWP_NOZORDER = 0x0004
    SWP_SHOWWINDOW = 0x0040

    # N·∫øu s·ªë c·ª≠a s·ªï <= capacity th√¨ s·∫Øp x·∫øp theo d·∫°ng l∆∞·ªõi
    if n <= capacity:
        for index, hwnd in enumerate(handles):
            row = index // max_cols
            col = index % max_cols
            x = col * custom_width
            y = row * custom_height
            user32.SetWindowPos(hwnd, None, x, y, custom_width, custom_height, SWP_NOZORDER | SWP_SHOWWINDOW)
            RDW_INVALIDATE = 0x1
            RDW_UPDATENOW = 0x100
            RDW_ALLCHILDREN = 0x80
            user32.RedrawWindow(hwnd, None, None, RDW_INVALIDATE | RDW_UPDATENOW | RDW_ALLCHILDREN)
            time.sleep(0.1)
            print(f"Consolog: [CHANGE] Di chuy·ªÉn c·ª≠a s·ªï HWND {hwnd} ƒë·∫øn v·ªã tr√≠ ({x}, {y}) v·ªõi k√≠ch th∆∞·ªõc {custom_width}x{custom_height}")
    else:
        # N·∫øu s·ªë c·ª≠a s·ªï v∆∞·ª£t qu√° capacity, s·ª≠ d·ª•ng s·∫Øp x·∫øp ki·ªÉu cascade (m√°i ng√≥i) ƒë·ªÉ ƒë·∫£m b·∫£o m·ªói c·ª≠a s·ªï ƒë∆∞·ª£c hi·ªÉn th·ªã m·ªôt ph·∫ßn (ti√™u ƒë·ªÅ)
        offset_x = 30   # Kho·∫£ng c√°ch d·ªùi ngang gi·ªØa c√°c c·ª≠a s·ªï
        offset_y = 30   # Kho·∫£ng c√°ch d·ªùi d·ªçc gi·ªØa c√°c c·ª≠a s·ªï
        base_x = 0
        base_y = 0
        for index, hwnd in enumerate(handles):
            # T√≠nh v·ªã tr√≠ d·ª±a tr√™n d·∫°ng cascade ‚Äì s·ª≠ d·ª•ng (index % capacity) ƒë·ªÉ gi·ªõi h·∫°n ƒë·ªô d·ªùi
            x = base_x + (index % capacity) * offset_x
            y = base_y + (index % capacity) * offset_y
            # ƒêi·ªÅu ch·ªânh n·∫øu c·ª≠a s·ªï v∆∞·ª£t ra ngo√†i m√†n h√¨nh
            if x + custom_width > screen_width:
                x = screen_width - custom_width
            if y + custom_height > screen_height:
                y = screen_height - custom_height
            user32.SetWindowPos(hwnd, None, x, y, custom_width, custom_height, SWP_NOZORDER | SWP_SHOWWINDOW)
            RDW_INVALIDATE = 0x1
            RDW_UPDATENOW = 0x100
            RDW_ALLCHILDREN = 0x80
            user32.RedrawWindow(hwnd, None, None, RDW_INVALIDATE | RDW_UPDATENOW | RDW_ALLCHILDREN)
            time.sleep(0.1)
            print(f"Consolog: [CHANGE] (Cascade) Di chuy·ªÉn c·ª≠a s·ªï HWND {hwnd} ƒë·∫øn v·ªã tr√≠ ({x}, {y}) v·ªõi k√≠ch th∆∞·ªõc {custom_width}x{custom_height}")

    messagebox.showinfo("Arrange", lang["arrange_result"].format(count=n))

def log_message(msg):
    text_log.insert(tk.END, msg + "\n")
    text_log.see(tk.END)
    print(f"[LOG] {msg}")

def save_path():
    folder_path = entry_path.get()
    print(f"Consolog: L∆∞u ƒë∆∞·ªùng d·∫´n: {folder_path}")
    if os.path.exists(folder_path):
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            f.write(folder_path)
        messagebox.showinfo("L∆∞u th√†nh c√¥ng", lang["msg_saved_path"])
        update_stats()
        update_logged()
    else:
        messagebox.showerror("L·ªói", lang["msg_error_path"])

def load_path():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            path = f.read().strip()
            print(f"Consolog: ƒê∆∞·ªùng d·∫´n t·∫£i ƒë∆∞·ª£c: {path}")
            return path
    return ""

def browse_folder():
    folder_selected = filedialog.askdirectory()
    print(f"Consolog: Ng∆∞·ªùi d√πng ch·ªçn folder: {folder_selected}")
    entry_path.delete(0, tk.END)
    entry_path.insert(0, folder_selected)

def update_stats():
    folder_path = entry_path.get()
    if not os.path.exists(folder_path):
        return
    try:
        subfolders = [d for d in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, d))]
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc th∆∞ m·ª•c: {e}")
        return
    info_list = []
    for sub in subfolders:
        sub_path = os.path.join(folder_path, sub)
        tdata_count = sum(
            1 for item in os.listdir(sub_path)
            if item.lower() == 'tdata' and os.path.isdir(os.path.join(sub_path, item))
        )
        info_list.append(f"- {sub}: c√≥ {tdata_count} tdata folder(s)")
    info_text = "\n".join(info_list) if info_list else "Kh√¥ng c√≥ th∆∞ m·ª•c con n√†o."
    text_stats.delete("1.0", tk.END)
    text_stats.insert(tk.END, info_text)
    print("Consolog: C·∫≠p nh·∫≠t stats th√†nh c√¥ng.")

def update_logged():
    tdata_dir = entry_path.get()
    logged_list = []
    for folder in get_tdata_folders(tdata_dir):
        session_file = os.path.join(folder, "session.session")
        session_folder = os.path.join(folder, "session")
        if os.path.exists(session_file) or os.path.exists(session_folder):
            logged_list.append(os.path.basename(folder))
    text_logged.delete("1.0", tk.END)
    if logged_list:
        text_logged.insert(tk.END, ", ".join(logged_list))
    else:
        text_logged.insert(tk.END, lang["not_found"])
    print("Consolog: C·∫≠p nh·∫≠t logged sessions.")

def get_tdata_folders(main_dir):
    if not os.path.exists(main_dir):
        return []
    folders = [
        os.path.join(main_dir, f) for f in os.listdir(main_dir)
        if os.path.isdir(os.path.join(main_dir, f))
    ]
    print(f"Consolog: T√¨m th·∫•y {len(folders)} th∆∞ m·ª•c TData trong {main_dir}")
    return folders

def open_telegram_with_tdata(tdata_folder):
    telegram_exe = os.path.join(tdata_folder, "telegram.exe")
    tdata_sub = os.path.join(tdata_folder, "tdata")
    print(f"Consolog: M·ªü telegram t·ª´ folder: {tdata_folder}")
    if not os.path.exists(telegram_exe):
        log_message(f"Kh√¥ng t√¨m th·∫•y telegram.exe t·∫°i {telegram_exe}")
        return None
    if not os.path.exists(tdata_sub):
        log_message(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c tdata t·∫°i {tdata_sub}")
        return None
    log_message(f"üü¢ ƒêang m·ªü {telegram_exe} (cwd={tdata_folder})")
    proc = subprocess.Popen([telegram_exe], cwd=tdata_folder)
    time.sleep(1)
    return proc

async def async_login(session_path, phone, tdata_folder):
    print(f"Consolog: B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p cho {phone} v·ªõi session: {session_path}")
    client = TelegramClient(session_path, API_ID, API_HASH)
    try:
        await client.connect()
    except Exception as e:
        log_message(f"Consolog [ERROR]: L·ªói k·∫øt n·ªëi cho {phone}: {e}")
        cleanup_session_files(session_path)
        return False
    if not await client.is_user_authorized():
        try:
            await client.send_code_request(phone)
            log_message(f"Consolog: ƒê√£ g·ª≠i OTP cho {phone}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"G·ª≠i m√£ OTP th·∫•t b·∫°i cho {phone}: {e}")
            await client.disconnect()
            cleanup_session_files(session_path)
            return False
        otp = get_otp(phone)
        if not otp:
            messagebox.showerror("L·ªói", "Kh√¥ng nh·∫≠p OTP.")
            await client.disconnect()
            cleanup_session_files(session_path)
            return False
        auto_close_telegram()
        log_message("Consolog: ƒê·ª£i 0.5 gi√¢y sau khi ƒë√≥ng Telegram Portable...")
        await asyncio.sleep(1)
        log_message("Consolog: B·∫Øt ƒë·∫ßu ti·∫øn tr√¨nh ƒëƒÉng nh·∫≠p v·ªõi OTP.")
        try:
            await client.sign_in(phone, otp)
            if not await client.is_user_authorized():
                raise Exception("ƒêƒÉng nh·∫≠p OTP kh√¥ng th√†nh c√¥ng, c·∫ßn 2FA")
            log_message(f"Consolog: ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho {phone} (kh√¥ng 2FA)")
        except SessionPasswordNeededError:
            twofa_info = parse_2fa_info(tdata_folder)
            if "password" not in twofa_info:
                messagebox.showerror("L·ªói", lang["2fa_error"].format(phone=phone))
                await client.disconnect()
                cleanup_session_files(session_path)
                return False
            password_2fa = twofa_info["password"]
            try:
                await client.sign_in(password=password_2fa)
                if not await client.is_user_authorized():
                    raise Exception("ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng sau khi nh·∫≠p m·∫≠t kh·∫©u 2FA.")
                log_message(f"Consolog: ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho {phone} (2FA)")
            except Exception as e2:
                log_message(f"Consolog [ERROR]: L·ªói ƒëƒÉng nh·∫≠p 2FA cho {phone}: {e2}")
                messagebox.showerror("L·ªói", f"ƒêƒÉng nh·∫≠p 2FA th·∫•t b·∫°i cho {phone}: {e2}")
                await client.disconnect()
                cleanup_session_files(session_path)
                return False
        except PhoneCodeInvalidError:
            messagebox.showerror("L·ªói", f"M√£ OTP kh√¥ng ƒë√∫ng cho {phone}!")
            await client.disconnect()
            cleanup_session_files(session_path)
            return False
        except PhoneCodeExpiredError:
            messagebox.showerror("L·ªói", f"M√£ OTP ƒë√£ h·∫øt h·∫°n cho {phone}!")
            await client.disconnect()
            cleanup_session_files(session_path)
            return False
        except Exception as e:
            messagebox.showerror("L·ªói", f"ƒêƒÉng nh·∫≠p th·∫•t b·∫°i cho {phone}: {e}")
            await client.disconnect()
            cleanup_session_files(session_path)
            return False
    log_message(f"Consolog: Session cho {phone} ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i {session_path}")
    await client.disconnect()
    return True

def login_account(tdata_folder, update_item_callback):
    session_file = os.path.join(tdata_folder, "session.session")
    session_folder = os.path.join(tdata_folder, "session")
    phone = os.path.basename(tdata_folder)
    print(f"Consolog: ƒêang ƒëƒÉng nh·∫≠p t√†i kho·∫£n: {phone}")
    _ = open_telegram_with_tdata(tdata_folder)
    if os.path.exists(session_file) or os.path.exists(session_folder):
        authorized = asyncio.run(check_authorization(session_folder, phone))
        if authorized:
            update_item_callback(phone, lang["skipped"])
            successful_sessions.add(phone)
            print(f"Consolog: {phone} session ƒë√£ c√≥, b·ªè qua ƒëƒÉng nh·∫≠p.")
            return True
        else:
            cleanup_session_files(session_folder)
    result = asyncio.run(async_login(os.path.join(tdata_folder, "session"), phone, tdata_folder))
    if result:
        update_item_callback(phone, lang["success"])
        successful_sessions.add(phone)
    else:
        update_item_callback(phone, lang["failure"])
    return result

def change_account_settings():
    print("Consolog: Y√™u c·∫ßu thay ƒë·ªïi th√¥ng tin t√†i kho·∫£n.")
    messagebox.showinfo("Th√¥ng b√°o", lang["change_info_in_development"])

def copy_to_clipboard(text):
    root.clipboard_clear()
    root.clipboard_append(text)
    messagebox.showinfo("Copied", f"ƒê√£ copy: {text}")
    print(f"Consolog: ƒê√£ copy: {text}")

def open_telethon_terminal(session_folder):
    phone = os.path.basename(session_folder)
    twofa = parse_2fa_info(session_folder)
    password = twofa.get("password", "N/A")
    print(f"Consolog: M·ªü phi√™n Telethon cho {phone} t·ª´ session folder: {session_folder}")

    term_win = tk.Toplevel(root)
    term_win.title(lang["telethon_session_title"].format(phone=phone))
    center_window(term_win, 400, 250)

    frame_phone = tk.Frame(term_win)
    frame_phone.pack(pady=5, fill=tk.X)
    lbl_phone = tk.Label(frame_phone, text=f"Phone: {phone}", anchor="w")
    lbl_phone.pack(side=tk.LEFT, expand=True, fill=tk.X)
    btn_copy_phone = tk.Button(frame_phone, text="Copy", command=lambda: copy_to_clipboard(phone))
    btn_copy_phone.pack(side=tk.RIGHT)

    frame_pass = tk.Frame(term_win)
    frame_pass.pack(pady=5, fill=tk.X)
    lbl_pass = tk.Label(frame_pass, text=f"Password: {password}", anchor="w")
    lbl_pass.pack(side=tk.LEFT, expand=True, fill=tk.X)
    btn_copy_pass = tk.Button(frame_pass, text="Copy", command=lambda: copy_to_clipboard(password))
    btn_copy_pass.pack(side=tk.RIGHT)

    frame_otp = tk.Frame(term_win)
    frame_otp.pack(pady=5, fill=tk.X, padx=10)
    otp_var = tk.StringVar(value="OTP: ")
    lbl_otp = tk.Label(frame_otp, textvariable=otp_var, anchor="w")
    lbl_otp.pack(side=tk.LEFT, expand=True, fill=tk.X)
    btn_copy_otp = tk.Button(frame_otp, text="Copy", command=lambda: copy_to_clipboard(otp_var.get().replace('OTP: ', '')))
    btn_copy_otp.pack(side=tk.RIGHT)

    def update_otp(new_otp):
        print(f"Consolog: C·∫≠p nh·∫≠t OTP: {new_otp}")
        otp_var.set(f"OTP: {new_otp}")

    def run_telethon():
        async def telethon_session():
            print(f"Consolog: Kh·ªüi t·∫°o client t·ª´ session folder: {session_folder}")
            client = TelegramClient(os.path.join(session_folder, "session"), API_ID, API_HASH)
            try:
                await client.connect()
                authorized = await client.is_user_authorized()
                print(f"Consolog: Authorized: {authorized}")
                if not authorized:
                    term_win.after(0, update_otp, "Session is NOT authorized!")
                    return

                term_win.after(0, update_otp, "Session authorized - waiting for OTP messages...")

                @client.on(events.NewMessage)
                async def handler(event):
                    text_msg = event.message.message
                    print(f"Consolog: Tin nh·∫Øn m·ªõi nh·∫≠n ƒë∆∞·ª£c: {text_msg}")
                    m = re.search(r'\b\d{5,6}\b', text_msg)
                    if m:
                        found_otp = m.group(0)
                        print(f"Consolog: OTP t√¨m th·∫•y: {found_otp}")
                        term_win.after(0, update_otp, found_otp)

                await client.run_until_disconnected()
            except Exception as e:
                print(f"Consolog [ERROR]: {e}")
                term_win.after(0, update_otp, f"Error: {e}")
            finally:
                await client.disconnect()
                print("Consolog: Client ƒë√£ ng·∫Øt k·∫øt n·ªëi.")

        asyncio.run(telethon_session())

    threading.Thread(target=run_telethon, daemon=True).start()

def on_closing():
    print("Consolog: Ki·ªÉm tra v√† x√≥a session ch∆∞a ho√†n th√†nh tr∆∞·ªõc khi t·∫Øt tool...")
    tdata_dir = entry_path.get()
    if os.path.exists(tdata_dir):
        folders = get_tdata_folders(tdata_dir)
        for folder in folders:
            phone = os.path.basename(folder)
            if phone not in successful_sessions:
                print(f"Consolog: X√≥a session ch∆∞a ho√†n th√†nh cho {phone}")
                cleanup_session_files(os.path.join(folder, "session"))
                session_file = os.path.join(folder, "session.session")
                if os.path.exists(session_file):
                    try:
                        os.remove(session_file)
                        print(f"Consolog: ƒê√£ x√≥a file session {session_file}")
                    except Exception as e:
                        print(f"Consolog [ERROR]: L·ªói x√≥a file session {session_file}: {e}")
    root.destroy()

def login_all_accounts():
    print("Consolog: Kh·ªüi t·∫°o c·ª≠a s·ªï ƒëƒÉng nh·∫≠p cho t·∫•t c·∫£ t√†i kho·∫£n...")
    login_window = tk.Toplevel(root)
    login_window.title(lang["login_window_title"])
    center_window(login_window, 550, 600)

    frame_already = tk.Frame(login_window)
    frame_already.pack(padx=10, pady=5, fill=tk.BOTH, expand=False)

    tk.Label(frame_already, text=lang["logged_accounts"], font=("Arial Unicode MS", 10, "bold")).pack(anchor="w")
    already_tree = ttk.Treeview(frame_already, columns=("account",), show="headings", height=5)
    already_tree.heading("account", text=lang["logged_accounts"])
    already_tree.column("account", width=300)
    already_tree.pack(fill=tk.BOTH, expand=True)

    def update_already_table():
        print("Consolog: C·∫≠p nh·∫≠t b·∫£ng t√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p...")
        already_tree.delete(*already_tree.get_children())
        tdata_dir = entry_path.get()
        for folder in get_tdata_folders(tdata_dir):
            session_file = os.path.join(folder, "session.session")
            session_folder = os.path.join(folder, "session")
            if os.path.exists(session_file) or os.path.exists(session_folder):
                already_tree.insert("", tk.END, values=(os.path.basename(folder),))

    update_already_table()

    btn_open_telethon = tk.Button(login_window, text="Open Telethon", state=tk.DISABLED, font=("Arial Unicode MS", 10, "bold"))
    btn_open_telethon.pack(pady=5)

    selected_session = {"path": None}

    def on_session_select(event):
        selected = already_tree.selection()
        if selected:
            session_name = str(already_tree.item(selected[0])["values"][0])
            tdata_dir = entry_path.get()
            session_path = os.path.join(tdata_dir, session_name)
            selected_session["path"] = session_path
            btn_open_telethon.config(state=tk.NORMAL)
        else:
            btn_open_telethon.config(state=tk.DISABLED)
            selected_session["path"] = None

    already_tree.bind("<<TreeviewSelect>>", on_session_select)

    def open_telethon_action():
        if selected_session["path"]:
            print(f"Consolog: M·ªü phi√™n Telethon cho session: {selected_session['path']}")
            open_telethon_terminal(selected_session["path"])
        else:
            messagebox.showwarning("Warning", "Ch∆∞a ch·ªçn session n√†o.")

    btn_open_telethon.config(command=open_telethon_action)

    tdata_dir = entry_path.get()
    all_tdata_folders = get_tdata_folders(tdata_dir)
    login_tdata_folders = [
        folder for folder in all_tdata_folders
        if not (os.path.exists(os.path.join(folder, "session.session")) or os.path.exists(os.path.join(folder, "session")))
    ]
    accounts = [os.path.basename(folder) for folder in login_tdata_folders]
    total = len(accounts)
    print(f"Consolog: C√≥ {total} t√†i kho·∫£n c·∫ßn ƒëƒÉng nh·∫≠p.")

    frame_table = tk.Frame(login_window)
    frame_table.pack(padx=10, pady=5, fill=tk.BOTH, expand=True)

    columns = ("account", "status")
    tree = ttk.Treeview(frame_table, columns=columns, show="headings", height=10)
    tree.heading("account", text="TData")
    tree.heading("status", text=lang["not_started"])
    tree.column("account", width=200, anchor="center")
    tree.column("status", width=150, anchor="center")
    tree.pack(fill=tk.BOTH, expand=True)

    for acc in accounts:
        tree.insert("", tk.END, iid=acc, values=(acc, lang["not_started"]))

    progress_frame = tk.Frame(login_window)
    progress_frame.pack(padx=10, pady=5, fill=tk.X)

    progress_var = tk.DoubleVar(value=0)
    progress_bar = ttk.Progressbar(progress_frame, variable=progress_var, maximum=100)
    progress_bar.pack(fill=tk.X, expand=True)
    progress_label = tk.Label(progress_frame, text="0%")
    progress_label.pack()

    frame_buttons_new = tk.Frame(login_window)
    frame_buttons_new.pack(pady=5)
    btn_create_session = tk.Button(frame_buttons_new, text=lang["create_session"], font=("Arial Unicode MS", 10, "bold"))
    btn_update_privacy = tk.Button(frame_buttons_new, text=lang["update_privacy"], font=("Arial Unicode MS", 10, "bold"), command=run_tool)
    btn_change_info = tk.Button(frame_buttons_new, text=lang["change_info"], font=("Arial Unicode MS", 10, "bold"), command=change_account_settings)

    btn_create_session.pack(side=tk.LEFT, padx=5)
    btn_update_privacy.pack(side=tk.LEFT, padx=5)
    btn_change_info.pack(side=tk.LEFT, padx=5)

    btn_delete_all = tk.Button(login_window, text=lang["popup_inactive_delete"], font=("Arial Unicode MS", 10, "bold"), command=delete_all_sessions)
    btn_delete_all.pack(pady=5)

    def update_item(account, status):
        tree.item(account, values=(account, status))
        if status == lang["processing"]:
            tree.tag_configure("processing", background="yellow")
            tree.item(account, tags=("processing",))
        elif status == lang["success"]:
            tree.tag_configure("success", background="lightgreen")
            tree.item(account, tags=("success",))
        elif status == lang["failure"]:
            tree.tag_configure("failed", background="tomato")
            tree.item(account, tags=("failed",))
        elif status == lang["skipped"]:
            tree.tag_configure("skipped", background="lightblue")
            tree.item(account, tags=("skipped",))
        login_window.update_idletasks()

    def process_accounts():
        print("Consolog: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒëƒÉng nh·∫≠p c√°c t√†i kho·∫£n...")
        processed = 0
        login_success = []
        login_failure = []
        for folder in login_tdata_folders:
            acc = os.path.basename(folder)
            if os.path.exists(os.path.join(folder, "session.session")) or os.path.exists(os.path.join(folder, "session")):
                update_item(acc, lang["skipped"])
                processed += 1
                percent = (processed / total) * 100
                login_window.after(0, progress_var.set, percent)
                login_window.after(0, progress_label.config, {"text": f"{int(percent)}%"})
                continue

            login_window.after(0, update_item, acc, lang["processing"])
            result = login_account(folder, update_item)
            if result:
                login_success.append(acc)
            else:
                login_failure.append(acc)

            processed += 1
            percent = (processed / total) * 100
            login_window.after(0, progress_var.set, percent)
            login_window.after(0, progress_label.config, {"text": f"{int(percent)}%"})
            time.sleep(0.5)

        login_window.after(0, update_already_table)

        summary = (
            f"{lang['already_logged']}: {len([a for a in accounts if tree.item(a)['values'][1]==lang['skipped']])}\n"
            f"{lang['success']}: {len(login_success)}\n"
            f"{lang['failure']}: {len(login_failure)}\n"
        )
        print("Consolog: Ho√†n th√†nh ƒëƒÉng nh·∫≠p, t·ªïng k·∫øt:")
        print(summary)

        login_window.after(0, messagebox.showinfo, "Ho√†n th√†nh", lang["msg_login_complete"])
        login_window.after(0, close_all_telegram_threaded)

    def start_login_process():
        btn_create_session.config(state=tk.DISABLED)
        threading.Thread(target=process_accounts, daemon=True).start()

    btn_create_session.config(command=start_login_process)

def update_privacy(session_path):
    async def run_update():
        print(f"Consolog: ƒêang c·∫≠p nh·∫≠t quy·ªÅn ri√™ng t∆∞ cho session: {session_path}")
        client = TelegramClient(session_path, API_ID, API_HASH)
        try:
            await client.connect()
        except Exception as e:
            log_message(f"Consolog [ERROR]: L·ªói k·∫øt n·ªëi cho {session_path}: {e}")
            return
        try:
            await client(functions.account.SetPrivacyRequest(
                key=types.InputPrivacyKeyPhoneNumber(),
                rules=[types.InputPrivacyValueDisallowAll()]
            ))
            if hasattr(types, "InputPrivacyKeyCalls"):
                await client(functions.account.SetPrivacyRequest(
                    key=types.InputPrivacyKeyCalls(),
                    rules=[types.InputPrivacyValueDisallowAll()]
                ))
            else:
                log_message("Consolog: InputPrivacyKeyCalls kh√¥ng kh·∫£ d·ª•ng, b·ªè qua.")
            log_message(f"Consolog: C·∫≠p nh·∫≠t quy·ªÅn ri√™ng t∆∞ th√†nh c√¥ng cho session {session_path}")
        except Exception as e:
            log_message(f"Consolog [ERROR]: L·ªói c·∫≠p nh·∫≠t quy·ªÅn ri√™ng t∆∞ cho session {session_path}: {e}")
        await client.disconnect()

    asyncio.run(run_update())

def run_tool():
    print("Consolog: B·∫Øt ƒë·∫ßu ch·∫°y t√≠nh nƒÉng c·∫≠p nh·∫≠t quy·ªÅn ri√™ng t∆∞ cho t·∫•t c·∫£ t√†i kho·∫£n.")
    tdata_dir = entry_path.get()
    if not os.path.exists(tdata_dir):
        messagebox.showerror("L·ªói", lang["msg_error_path"])
        return
    tdata_folders = get_tdata_folders(tdata_dir)
    for folder in tdata_folders:
        open_telegram_with_tdata(folder)
    time.sleep(10)
    for folder in tdata_folders:
        session_path = os.path.join(folder, "session")
        try:
            asyncio.run(update_privacy(session_path))
        except Exception as e:
            log_message(f"Consolog [ERROR]: L·ªói c·∫≠p nh·∫≠t quy·ªÅn ri√™ng t∆∞ cho {folder}: {e}")
    messagebox.showinfo("Ho√†n th√†nh", lang["msg_privacy_complete"])
    log_message("Consolog: ƒê√£ ho√†n t·∫•t c·∫≠p nh·∫≠t quy·ªÅn ri√™ng t∆∞.")

############################################
# Consolog: PH·∫¶N CHECK LIVE V·∫™N GI·ªÆ NGUY√äN
############################################
check_live_thread = None
check_live_pause_event = threading.Event()
check_live_status = {}
confirm_done = False
tdata_process_map = {}
TEMP_SCREENSHOT_FOLDER = None

def load_check_live_status_file():
    print("Consolog: ƒêang load tr·∫°ng th√°i check live t·ª´ file...")
    if os.path.exists("check_live_status.txt"):
        try:
            with open("check_live_status.txt", "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if ": Check:" in line and "| Live:" in line:
                        name_part, rest = line.split(": Check:", 1)
                        tdata_name = name_part.strip()
                        if "| Live:" in rest:
                            check_part, live_part = rest.split("| Live:", 1)
                            check_live_status[tdata_name] = {
                                "check": check_part.strip(),
                                "live": live_part.strip()
                            }
            print("Consolog: ƒê√£ load tr·∫°ng th√°i check live th√†nh c√¥ng.")
        except Exception as e:
            print(f"Consolog [ERROR]: L·ªói ƒë·ªçc file check_live_status.txt: {e}")

def save_check_live_status_file():
    print("Consolog: L∆∞u tr·∫°ng th√°i check live v√†o file...")
    try:
        with open("check_live_status.txt", "w", encoding="utf-8") as f:
            for key, val in check_live_status.items():
                f.write(f"{key}: Check: {val['check']} | Live: {val['live']}\n")
        print("Consolog: L∆∞u tr·∫°ng th√°i th√†nh c√¥ng.")
    except Exception as e:
        print(f"Consolog [ERROR]: L·ªói ghi file check_live_status.txt: {e}")

def compare_screenshot_with_marker(screenshot, marker_image, threshold=20):
    print("Consolog: So s√°nh ·∫£nh ch·ª•p v·ªõi marker image...")
    if screenshot.size != marker_image.size:
        marker_image = marker_image.resize(screenshot.size)
    diff = ImageChops.difference(screenshot, marker_image)
    h = diff.histogram()
    sq = (value * ((idx % 256) ** 2) for idx, value in enumerate(h))
    sum_sq = sum(sq)
    rms = math.sqrt(sum_sq / (screenshot.size[0] * screenshot.size[1]))
    print(f"Consolog: Gi√° tr·ªã RMS = {rms}")
    return rms < threshold

def show_marker_selection_popup(screenshot_paths):
    print("Consolog: Hi·ªÉn th·ªã popup ch·ªçn marker image...")
    popup = tk.Toplevel(root)
    popup.title("Ch·ªçn marker image")
    center_window(popup, 800, 600)
    instruction = tk.Label(
        popup,
        text="H√£y ch·ªâ ra cho t√¥i ƒë√¢u l√† d·∫•u hi·ªáu nh·∫≠n bi·∫øt t√†i kho·∫£n telegram ƒë√£ ch·∫øt b·∫±ng c√°ch ch·ªçn ·∫£nh t·ª´ danh s√°ch b√™n tr√°i",
        font=("Arial Unicode MS", 10, "bold"),
        wraplength=780
    )
    instruction.pack(pady=10)

    selected_path = {"path": None}

    frame = tk.Frame(popup)
    frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    listbox = tk.Listbox(frame, width=40)
    listbox.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)

    for path in screenshot_paths:
        listbox.insert(tk.END, os.path.basename(path))

    preview_label = tk.Label(frame)
    preview_label.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)

    def on_select(event):
        selection = listbox.curselection()
        if selection:
            index = selection[0]
            file_path = screenshot_paths[index]
            selected_path["path"] = file_path
            try:
                img = Image.open(file_path)
                img.thumbnail((400, 400))
                photo = ImageTk.PhotoImage(img)
                preview_label.config(image=photo)
                preview_label.image = photo
            except Exception as e:
                print(f"Consolog [ERROR]: L·ªói m·ªü ·∫£nh {file_path}: {e}")

    listbox.bind("<<ListboxSelect>>", on_select)

    def on_confirm():
        if not selected_path["path"]:
            messagebox.showwarning("Warning", "Vui l√≤ng ch·ªçn m·ªôt ·∫£nh!")
            return
        if os.path.exists(MARKER_IMAGE_PATH):
            try:
                os.remove(MARKER_IMAGE_PATH)
                print("Consolog: X√≥a file marker c≈©.")
            except Exception as e:
                print(f"Consolog [ERROR]: L·ªói x√≥a file marker c≈©: {e}")
        try:
            shutil.copy(selected_path["path"], MARKER_IMAGE_PATH)
            print(f"Consolog: ƒê√£ l∆∞u marker image t·∫°i {MARKER_IMAGE_PATH}")
        except Exception as e:
            print(f"Consolog [ERROR]: L·ªói l∆∞u marker image: {e}")
        popup.destroy()

    confirm_button = tk.Button(popup, text="X√°c nh·∫≠n", command=on_confirm)
    confirm_button.pack(pady=10)
    popup.transient(root)
    popup.grab_set()
    root.wait_window(popup)

def screenshot_comparison_worker():
    print("Consolog: Lu·ªìng so s√°nh ·∫£nh b·∫Øt ƒë·∫ßu, ch·ªù 2 gi√¢y...")
    time.sleep(2)
    user32 = ctypes.windll.user32
    captured_screenshots = {}

    for tdata_name, pid_list in tdata_process_map.items():
        print(f"Consolog: === B·∫ÆT ƒê·∫¶U X·ª¨ L√ù TDATA: {tdata_name} ===")
        window_handle = None
        for pid in pid_list:
            print(f"Consolog: -> ƒêang l·∫•y HWND cho PID={pid} (TData={tdata_name})")
            try:
                hwnd = get_window_handle_by_pid(int(pid))
                print(f"Consolog: get_window_handle_by_pid({pid}) => {hwnd}")
            except Exception as e:
                print(f"Consolog [ERROR]: L·ªói get_window_handle_by_pid: {e}")
                hwnd = None
            if hwnd:
                window_handle = hwnd
                print(f"Consolog: -> ƒê√£ t√¨m th·∫•y HWND={window_handle} cho PID={pid}, b·ªè qua c√°c PID kh√°c.")
                break

        if window_handle:
            try:
                SW_RESTORE = 9
                user32.ShowWindow(window_handle, SW_RESTORE)
                user32.SetForegroundWindow(window_handle)
                print(f"Consolog: -> ƒê√£ g·ªçi ShowWindow/SetForegroundWindow cho HWND={window_handle}")
                time.sleep(0.5)

                rect = wintypes.RECT()
                user32.GetWindowRect(window_handle, ctypes.byref(rect))
                w = rect.right - rect.left
                h = rect.bottom - rect.top
                print(f"Consolog: K√≠ch th∆∞·ªõc c·ª≠a s·ªï (HWND={window_handle}): ({rect.left}, {rect.top}, {rect.right}, {rect.bottom}) => {w}x{h}")

                screenshot = capture_window(window_handle)
                if screenshot is None:
                    print("Consolog [ERROR]: capture_window tr·∫£ v·ªÅ None, kh√¥ng ch·ª•p ƒë∆∞·ª£c ·∫£nh!")
                else:
                    print(f"Consolog: ƒê√£ ch·ª•p ·∫£nh th√†nh c√¥ng (size={screenshot.size}).")

                if screenshot:
                    if TEMP_SCREENSHOT_FOLDER:
                        file_path = os.path.join(TEMP_SCREENSHOT_FOLDER, f"{tdata_name}_screenshot.png")
                        screenshot.save(file_path)
                        print(f"Consolog: ƒê√£ l∆∞u ·∫£nh ch·ª•p c·ªßa {tdata_name} t·∫°i {file_path}")
                        captured_screenshots[tdata_name] = file_path
            except Exception as e:
                print(f"Consolog [ERROR]: L·ªói ch·ª•p ·∫£nh cho {tdata_name} - HWND={window_handle}: {e}")
        else:
            print(f"Consolog: -> Kh√¥ng t√¨m th·∫•y HWND cho {tdata_name}, ƒë√°nh d·∫•u not_active.")
            check_live_status[tdata_name]["live"] = lang["not_active"]
        cl_win.after(0, refresh_table_global)

    screenshot_paths = list(captured_screenshots.values())
    if screenshot_paths:
        print(f"Consolog: ƒê√£ ch·ª•p ƒë∆∞·ª£c {len(screenshot_paths)} ·∫£nh, m·ªü popup ch·ªçn marker.")
        show_marker_selection_popup(screenshot_paths)
    else:
        print("Consolog: Kh√¥ng c√≥ ·∫£nh ch·ª•p n√†o ƒë·ªÉ ch·ªçn marker.")

    marker_image = None
    if os.path.exists(MARKER_IMAGE_PATH):
        try:
            marker_image = Image.open(MARKER_IMAGE_PATH)
            print("Consolog: ƒê√£ m·ªü file marker_image.png ƒë·ªÉ so s√°nh.")
        except Exception as e:
            print(f"Consolog [ERROR]: L·ªói m·ªü marker image: {e}")

    for tdata_name, file_path in captured_screenshots.items():
        if marker_image is not None:
            try:
                screenshot = Image.open(file_path)
                print(f"Consolog: So s√°nh ·∫£nh {file_path} v·ªõi marker...")
                is_similar = compare_screenshot_with_marker(screenshot, marker_image)
                if is_similar:
                    check_live_status[tdata_name]["live"] = lang["not_active"]
                    print(f"Consolog: {tdata_name} => not_active (g·∫ßn gi·ªëng marker).")
                else:
                    check_live_status[tdata_name]["live"] = lang["live"]
                    print(f"Consolog: {tdata_name} => live (kh√°c marker).")
            except Exception as e:
                print(f"Consolog [ERROR]: L·ªói so s√°nh ·∫£nh cho {tdata_name}: {e}")
        else:
            check_live_status[tdata_name]["live"] = lang["live"]
            print(f"Consolog: Kh√¥ng c√≥ marker, ƒë·∫∑t m·∫∑c ƒë·ªãnh {tdata_name} => live.")

        cl_win.after(0, refresh_table_global)

    print("Consolog: So s√°nh ·∫£nh ho√†n th√†nh.")
    cl_win.after(0, lambda: messagebox.showinfo("Check live", "ƒê√£ ho√†n th√†nh ki·ªÉm tra qua so s√°nh h√¨nh ·∫£nh."))

    cl_win.after(0, lambda: messagebox.showinfo("Check live", "Qu√° tr√¨nh m·ªü telegram ho√†n t·∫•t. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông so s√°nh h√¨nh ·∫£nh sau 2 gi√¢y."))

def check_live_window():
    global cl_win, refresh_table_global
    cl_win = tk.Toplevel(root)
    cl_win.title(lang["check_live_title"])
    center_window(cl_win, 1200, 500)

    size_frame = tk.Frame(cl_win)
    size_frame.pack(pady=5)

    tk.Label(size_frame, text="Window Width:").grid(row=0, column=0, padx=5)
    entry_width = tk.Entry(size_frame, width=6)
    default_width, default_height = load_window_size()
    entry_width.insert(0, str(default_width))
    entry_width.grid(row=0, column=1, padx=5)

    tk.Label(size_frame, text="Window Height:").grid(row=0, column=2, padx=5)
    entry_height = tk.Entry(size_frame, width=6)
    entry_height.insert(0, str(default_height))
    entry_height.grid(row=0, column=3, padx=5)

    load_check_live_status_file()

    columns = ("stt", "tdata", "check_status", "live_status")
    tree = ttk.Treeview(cl_win, columns=columns, show="headings", height=15)

    tree.heading("stt", text=lang["stt"])
    tree.heading("tdata", text="TData")
    tree.heading("check_status", text=lang["check_status"])
    tree.heading("live_status", text=lang["live_status"])

    tree.column("stt", width=50, anchor="center")
    tree.column("tdata", width=200, anchor="center")
    tree.column("check_status", width=200, anchor="center")
    tree.column("live_status", width=200, anchor="center")

    tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    def refresh_table():
        tree.delete(*tree.get_children())
        tdata_dir = entry_path.get()
        folders = get_tdata_folders(tdata_dir)
        for idx, folder in enumerate(folders, start=1):
            tdata_name = os.path.basename(folder)
            if tdata_name not in check_live_status:
                check_live_status[tdata_name] = {"check": lang["not_checked"], "live": lang["not_checked"]}
            row_data = check_live_status[tdata_name]
            tree.insert("", tk.END, values=(idx, tdata_name, row_data["check"], row_data["live"]))

        print("Consolog: C·∫≠p nh·∫≠t b·∫£ng check live.")

    refresh_table_global = refresh_table
    refresh_table()

    def switch_button_states(running):
        if running:
            btn_start.config(state=tk.DISABLED)
            btn_pause.config(state=tk.NORMAL)
        else:
            btn_start.config(state=tk.NORMAL)
            btn_pause.config(state=tk.DISABLED)

    def start_check_live():
        global check_live_thread, tdata_process_map, TEMP_SCREENSHOT_FOLDER
        tdata_process_map = {}
        print("Consolog: B·∫Øt ƒë·∫ßu quy tr√¨nh check live...")

        TEMP_SCREENSHOT_FOLDER = os.path.join(os.getcwd(), "temp_screenshots")
        if os.path.exists(TEMP_SCREENSHOT_FOLDER):
            shutil.rmtree(TEMP_SCREENSHOT_FOLDER)
        os.makedirs(TEMP_SCREENSHOT_FOLDER, exist_ok=True)
        print(f"Consolog: T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u ·∫£nh ch·ª•p t·∫°i {TEMP_SCREENSHOT_FOLDER}")

        if check_live_thread and check_live_pause_event.is_set():
            check_live_pause_event.clear()
            switch_button_states(running=True)
            return

        switch_button_states(running=True)

        def worker():
            tdata_dir = entry_path.get()
            folders = get_tdata_folders(tdata_dir)

            for folder in folders:
                while check_live_pause_event.is_set():
                    time.sleep(0.3)
                tdata_name = os.path.basename(folder)
                check_live_status[tdata_name] = {
                    "check": lang["checking"],
                    "live": check_live_status[tdata_name].get("live", lang["not_checked"])
                }
                cl_win.after(0, refresh_table_global)

                exe_path = os.path.join(folder, "telegram.exe")
                if os.path.exists(exe_path):
                    print(f"Consolog: M·ªü telegram cho TData {tdata_name}")
                    proc = subprocess.Popen([exe_path])
                    pid = proc.pid
                    if tdata_name not in tdata_process_map:
                        tdata_process_map[tdata_name] = []
                    tdata_process_map[tdata_name].append(pid)
                    print(f"Consolog: L∆∞u PID {pid} cho TData {tdata_name}")
                    time.sleep(1)
                    check_live_status[tdata_name]["check"] = lang["completed"]
                else:
                    check_live_status[tdata_name]["check"] = lang["exe_not_found"]

                cl_win.after(0, refresh_table_global)

            try:
                custom_width = int(entry_width.get())
            except:
                custom_width = 500
            try:
                custom_height = int(entry_height.get())
            except:
                custom_height = 300
            print(f"Consolog: S·ª≠ d·ª•ng k√≠ch th∆∞·ªõc c·ª≠a s·ªï t√πy ch·ªânh: {custom_width}x{custom_height}")
            save_window_size(custom_width, custom_height)
            print("Consolog: ƒê√£ l∆∞u k√≠ch th∆∞·ªõc c·ª≠a s·ªï.")

            print("Consolog: ƒê√£ m·ªü xong t·∫•t c·∫£ c·ª≠a s·ªï Telegram. Ti·∫øn h√†nh s·∫Øp x·∫øp c·ª≠a s·ªï...")
            # Consolog: [CHANGE] G·ªçi h√†m arrange_telegram_windows v·ªõi for_check_live=True ƒë·ªÉ s·∫Øp x·∫øp t·∫•t c·∫£ c·ª≠a s·ªï kh√¥ng lo·∫°i b·ªè c√°c c·ª≠a s·ªï c√πng PID.
            arrange_telegram_windows(custom_width, custom_height, for_check_live=True)

            cl_win.after(
                0,
                lambda: messagebox.showinfo(
                    "Check live",
                    "Qu√° tr√¨nh m·ªü telegram ho√†n t·∫•t.\nH·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông so s√°nh h√¨nh ·∫£nh sau 2 gi√¢y."
                )
            )

            threading.Thread(target=screenshot_comparison_worker, daemon=True).start()

            global check_live_thread
            check_live_thread = None

        check_live_thread = threading.Thread(target=worker, daemon=True)
        check_live_thread.start()

    def pause_check_live():
        print("Consolog: T·∫°m d·ª´ng quy tr√¨nh check live.")
        check_live_pause_event.set()
        switch_button_states(running=False)

    def confirm_check_live():
        print("Consolog: X√°c nh·∫≠n tr·∫°ng th√°i check live v√† l∆∞u v√†o file.")
        save_check_live_status_file()
        messagebox.showinfo("Check live", f"ƒê√£ l∆∞u tr·∫°ng th√°i check live v√†o file check_live_status.txt")
        global confirm_done
        confirm_done = True
        btn_copy_inactive.config(state=tk.NORMAL)
        btn_delete_inactive.config(state=tk.NORMAL)
        btn_copy_table.config(state=tk.NORMAL)

        global TEMP_SCREENSHOT_FOLDER
        if TEMP_SCREENSHOT_FOLDER and os.path.exists(TEMP_SCREENSHOT_FOLDER):
            shutil.rmtree(TEMP_SCREENSHOT_FOLDER)
            print(f"Consolog: ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m {TEMP_SCREENSHOT_FOLDER}")
            TEMP_SCREENSHOT_FOLDER = None

    def copy_table():
        if not confirm_done:
            messagebox.showwarning("Copy Table", "Vui l√≤ng b·∫•m '" + lang["confirm"] + "' tr∆∞·ªõc.")
            return
        table_text = ""
        for child in tree.get_children():
            values = tree.item(child, "values")
            table_text += "\t".join(str(v) for v in values) + "\n"
        root.clipboard_clear()
        root.clipboard_append(table_text)
        root.update()
        messagebox.showinfo("Copy Table", "ƒê√£ copy to√†n b·ªô n·ªôi dung b·∫£ng v√†o clipboard.")
        print("Consolog: Copy b·∫£ng check live th√†nh c√¥ng.")

    def copy_inactive():
        if not confirm_done:
            messagebox.showwarning("Copy Inactive", "Vui l√≤ng b·∫•m '" + lang["confirm"] + "' tr∆∞·ªõc.")
            return
        inactive_list = []
        for child in tree.get_children():
            values = tree.item(child, "values")
            if len(values) >= 4 and values[3] == lang["not_active"]:
                inactive_list.append(values[1])
        if not inactive_list:
            messagebox.showinfo("Copy Inactive", "Kh√¥ng c√≥ TData n√†o ·ªü tr·∫°ng th√°i kh√¥ng ho·∫°t ƒë·ªông.")
            return
        text_inactive = "\n".join(inactive_list)
        print(f"Consolog: Copy danh s√°ch TData kh√¥ng ho·∫°t ƒë·ªông: {text_inactive}")
        root.clipboard_clear()
        root.clipboard_append(text_inactive)
        root.update()
        messagebox.showinfo("Copy Inactive", "ƒê√£ copy v√†o clipboard danh s√°ch TData kh√¥ng ho·∫°t ƒë·ªông:\n" + text_inactive)

    def delete_inactive():
        if not confirm_done:
            messagebox.showwarning("X√≥a TData", "Vui l√≤ng b·∫•m '" + lang["confirm"] + "' tr∆∞·ªõc.")
            return
        print("Consolog: ƒêang x√≥a c√°c TData kh√¥ng ho·∫°t ƒë·ªông...")
        auto_close_telegram()

        tdata_dir = entry_path.get()
        folders = get_tdata_folders(tdata_dir)
        deleted = []
        for folder in folders:
            tdata_name = os.path.basename(folder)
            if check_live_status.get(tdata_name, {}).get("live") == lang["not_active"]:
                normalized_folder = os.path.normpath(folder)
                if os.path.exists(normalized_folder):
                    try:
                        print(f"Consolog: X√≥a TData kh√¥ng ho·∫°t ƒë·ªông: {normalized_folder}")
                        if send2trash:
                            send2trash(normalized_folder)
                        else:
                            shutil.rmtree(normalized_folder)
                        deleted.append(tdata_name)
                        check_live_status.pop(tdata_name, None)
                    except Exception as e:
                        log_message(f"Consolog [ERROR]: L·ªói x√≥a {normalized_folder}: {e}")
                else:
                    log_message(f"Consolog [ERROR]: Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {normalized_folder}")

        refresh_table_global()
        messagebox.showinfo("Check live", f"ƒê√£ x√≥a {len(deleted)} th∆∞ m·ª•c kh√¥ng ho·∫°t ƒë·ªông:\n" + ", ".join(deleted))
        save_check_live_status_file()
        print("Consolog: X√≥a TData kh√¥ng ho·∫°t ƒë·ªông ho√†n t·∫•t.")

    frame_buttons = tk.Frame(cl_win)
    frame_buttons.pack(pady=5)

    btn_start = tk.Button(frame_buttons, text=lang["start"], command=start_check_live, width=20)
    btn_pause = tk.Button(frame_buttons, text=lang["pause"], command=pause_check_live, width=20, state=tk.DISABLED)
    btn_confirm = tk.Button(frame_buttons, text=lang["confirm"], command=confirm_check_live, width=20)

    btn_copy_inactive = tk.Button(frame_buttons, text=lang["copy_inactive"], command=copy_inactive, width=25, state=tk.DISABLED)
    btn_delete_inactive = tk.Button(frame_buttons, text=lang["delete_inactive"], command=delete_inactive, width=25, state=tk.DISABLED)
    btn_copy_table = tk.Button(frame_buttons, text=lang["copy_table"], command=copy_table, width=20, state=tk.DISABLED)

    btn_start.grid(row=0, column=0, padx=5)
    btn_pause.grid(row=0, column=1, padx=5)
    btn_confirm.grid(row=0, column=2, padx=5)
    btn_copy_inactive.grid(row=0, column=3, padx=5)
    btn_delete_inactive.grid(row=0, column=4, padx=5)
    btn_copy_table.grid(row=0, column=5, padx=5)

def warn_auto_it():
    # Consolog [CHANGE]: ƒê√≥ng c·ª≠a s·ªï mini chat khi b·∫≠t ch·ª©c nƒÉng AutoIT.
    try:
        from mini_chat import destroy_mini_chat
        destroy_mini_chat()  # ƒê√≥ng c·ª≠a s·ªï mini chat
        print("Consolog: Mini chat ƒë√£ ƒë∆∞·ª£c ƒë√≥ng khi b·∫≠t ch·ª©c nƒÉng AutoIT.")
    except Exception as e:
        print("Consolog [WARNING]: Kh√¥ng th·ªÉ ƒë√≥ng mini chat:", e)
    warning_msg = (
        "„ÄêTi·∫øng Vi·ªát„Äë: Tr∆∞·ªõc khi kh·ªüi ch·∫°y ch·ª©c nƒÉng AutoIT, ch√∫ng t√¥i khuy·∫øn ngh·ªã b·∫°n ki·ªÉm tra tr·∫°ng th√°i tr·ª±c ti·∫øp c·ªßa c√°c t√†i kho·∫£n Telegram. "
        "ƒêi·ªÅu n√†y s·∫Ω ƒë·∫£m b·∫£o t·∫•t c·∫£ c√°c t√†i kho·∫£n ƒë·ªÅu ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng, t·ª´ ƒë√≥ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t c·ªßa qu√° tr√¨nh t·ª± ƒë·ªông.\n"
        "„ÄêEnglish„Äë: Before initiating the AutoIT function, we strongly recommend performing a live check on your Telegram accounts. "
        "This will ensure that all accounts are active and optimize the automation process.\n"
        "„Äê‰∏≠Êñá„Äë: Âú®ÂêØÂä® AutoIT ÂäüËÉΩ‰πãÂâçÔºåÊàë‰ª¨Âº∫ÁÉàÂª∫ËÆÆÊÇ®ÂÖàÂØπÊâÄÊúâ Telegram Ë¥¶Êà∑ËøõË°åÂÆûÊó∂Ê£ÄÊü•ÔºåÁ°Æ‰øùÂÆÉ‰ª¨ÂùáÂ§Ñ‰∫éÊ¥ªË∑ÉÁä∂ÊÄÅÔºå‰ªéËÄå‰ºòÂåñËá™Âä®ÂåñËøáÁ®ãÁöÑÊïàÁéá„ÄÇ"
    )
    messagebox.showinfo("Khuy·∫øn c√°o", warning_msg)
    auto_it_function(root, entry_path, lang, get_tdata_folders)

def report_function():
    print("Consolog: Report function ƒë∆∞·ª£c g·ªçi.")
    messagebox.showinfo("Report", lang["report_in_development"])

############################################
# CH·ª®C NƒÇNG open_telegram_copies GI·ªÆ NGUY√äN
############################################
def open_telegram_copies():
    def worker():
        results = []
        tdata_dir = entry_path.get()
        if not os.path.exists(tdata_dir):
            root.after(0, lambda: messagebox.showerror("L·ªói", lang["msg_error_path"]))
            return
        tdata_folders = get_tdata_folders(tdata_dir)
        for folder in tdata_folders:
            exe_path = os.path.join(folder, "telegram.exe")
            if os.path.exists(exe_path):
                try:
                    subprocess.Popen([exe_path])
                    results.append(f"M·ªü th√†nh c√¥ng: {folder}")
                except Exception as e:
                    results.append(f"L·ªói m·ªü {folder}: {e}")
            else:
                results.append(f"Kh√¥ng t√¨m th·∫•y exe: {folder}")
            time.sleep(1)
        root.after(0, lambda: messagebox.showinfo(lang["msg_open_result"], "\n".join(results)))
        time.sleep(1)
        root.after(0, lambda: arrange_telegram_windows(arrange_width, arrange_height))
    threading.Thread(target=worker, daemon=True).start()

def copy_telegram_portable():
    print("Consolog: ƒêang copy telegram.exe cho c√°c t√†i kho·∫£n...")
    tdata_dir = entry_path.get()
    if not os.path.exists(tdata_dir):
        messagebox.showerror("L·ªói", lang["msg_error_path"])
        return
    tdata_folders = get_tdata_folders(tdata_dir)
    results = []
    copied = []
    skipped = []
    errors = []

    source_exe = telegram_path_entry.get()
    if not os.path.isfile(source_exe):
        messagebox.showerror("Error", lang["invalid_source_exe"])
        return

    for folder in tdata_folders:
        target_path = os.path.join(folder, "telegram.exe")
        phone = os.path.basename(folder)
        if not os.path.exists(target_path):
            try:
                shutil.copy(source_exe, target_path)
                copied.append(phone)
                log_message(f"Consolog: {lang['copy_success'].format(phone=phone)}")
            except Exception as e:
                errors.append(f"{phone}: {str(e)}")
                log_message(f"Consolog [ERROR]: L·ªói copy telegram.exe cho {phone}: {e}")
        else:
            skipped.append(phone)
            log_message(lang["copy_skip"].format(phone=phone))

    summary = f"ƒê√£ copy: {len(copied)}\nB·ªè qua: {len(skipped)}\nL·ªói: {len(errors)}\n"
    if copied:
        summary += "ƒê√£ copy: " + ", ".join(copied) + "\n"
    if skipped:
        summary += "B·ªè qua: " + ", ".join(skipped) + "\n"
    if errors:
        summary += "L·ªói: " + "; ".join(errors)

    messagebox.showinfo(lang["msg_copy_result"], summary)
    print("Consolog: Ho√†n th√†nh copy telegram.exe.")

def close_all_telegram():
    print("Consolog: ƒêang ƒë√≥ng t·∫•t c·∫£ ti·∫øn tr√¨nh Telegram...")
    try:
        result = subprocess.run(["tasklist", "/FI", "IMAGENAME eq Telegram.exe", "/FO", "CSV"], capture_output=True, text=True)
        output = result.stdout.strip().splitlines()
        pids = []
        for line in output[1:]:
            parts = line.replace('"','').split(',')
            if len(parts) >= 2:
                pids.append(parts[1])
        closed = []
        errors = []
        for pid in pids:
            try:
                subprocess.run(["taskkill", "/F", "/PID", pid], capture_output=True, text=True)
                closed.append(pid)
                time.sleep(1)
            except Exception as e:
                errors.append(f"PID {pid}: {e}")
        summary = lang["close_result"].format(
            closed=", ".join(closed) if closed else "None",
            errors="; ".join(errors) if errors else "None"
        )
        log_message(summary)
        messagebox.showinfo(lang["close_result_title"], summary)
        print("Consolog: ƒê√≥ng ti·∫øn tr√¨nh Telegram ho√†n t·∫•t.")
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë√≥ng c√°c ti·∫øn tr√¨nh Telegram: {e}")

############################################
# CH·ª®C NƒÇNG SETTING ‚Äì T√ôY CH·ªàNH K√çCH TH∆Ø·ªöC C·ª¨A S·ªî V√Ä CHATGPT API KEY
############################################
def open_settings():
    popup = tk.Toplevel(root)
    popup.title("Setting - T√πy ch·ªânh s·∫Øp x·∫øp & ChatGPT")
    center_window(popup, 400, 350)

    lbl_info = tk.Label(popup, text="Nh·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï s·∫Øp x·∫øp:\nx = (s·ªë c·ªôt) √ó Custom Width, y = (s·ªë h√†ng) √ó Custom Height", wraplength=380)
    lbl_info.pack(pady=10)

    frame_entries = tk.Frame(popup)
    frame_entries.pack(pady=5)

    tk.Label(frame_entries, text="Custom Width:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
    entry_width = tk.Entry(frame_entries, width=10)
    entry_width.insert(0, str(arrange_width))
    entry_width.grid(row=0, column=1, padx=5, pady=5)

    tk.Label(frame_entries, text="Custom Height:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
    entry_height = tk.Entry(frame_entries, width=10)
    entry_height.insert(0, str(arrange_height))
    entry_height.grid(row=1, column=1, padx=5, pady=5)

    tk.Label(popup, text="ChatGPT API Key:").pack(pady=5)
    chatgpt_key_entry = tk.Entry(popup, width=50)
    chatgpt_key_entry.insert(0, load_chatgpt_api_key())
    chatgpt_key_entry.pack(pady=5)

    tk.Label(popup, text="Default Translation Language (Target):").pack(pady=5)
    translation_lang_var = tk.StringVar(value=DEFAULT_TARGET_LANG)
    translation_lang_menu = tk.OptionMenu(popup, translation_lang_var, "vi", "en", "zh")
    translation_lang_menu.pack(pady=5)

    def save_settings():
        global arrange_width, arrange_height, CHATGPT_API_KEY, DEFAULT_TARGET_LANG
        try:
            w = int(entry_width.get())
            h = int(entry_height.get())
            arrange_width = w
            arrange_height = h

            save_chatgpt_api_key(chatgpt_key_entry.get().strip())
            CHATGPT_API_KEY = chatgpt_key_entry.get().strip()

            DEFAULT_TARGET_LANG = translation_lang_var.get()

            messagebox.showinfo("Setting", "ƒê√£ l∆∞u c·∫•u h√¨nh s·∫Øp x·∫øp, ChatGPT API Key v√† ng√¥n ng·ªØ d·ªãch m·∫∑c ƒë·ªãnh!")
            popup.destroy()
        except Exception as e:
            messagebox.showerror("Error", f"Gi√° tr·ªã kh√¥ng h·ª£p l·ªá: {e}")

    btn_save = tk.Button(popup, text="Save", command=save_settings)
    btn_save.pack(pady=10)

    popup.transient(root)
    popup.grab_set()
    root.wait_window(popup)

def center_window(win, width, height):
    win.update_idletasks()
    screen_width = win.winfo_screenwidth()
    screen_height = win.winfo_screenheight()
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2
    win.geometry(f"{width}x{height}+{x}+{y}")

def load_window_size():
    if os.path.exists(WINDOW_SIZE_FILE):
        try:
            with open(WINDOW_SIZE_FILE, "r") as f:
                line = f.read().strip()
                parts = line.split(",")
                if len(parts) == 2:
                    width = int(parts[0])
                    height = int(parts[1])
                    print(f"Consolog: Load k√≠ch th∆∞·ªõc c·ª≠a s·ªï t·ª´ file: {width}x{height}")
                    return width, height
        except Exception as e:
            print(f"Consolog [ERROR]: L·ªói load k√≠ch th∆∞·ªõc c·ª≠a s·ªï: {e}")
    return 500, 504

def save_window_size(width, height):
    try:
        with open(WINDOW_SIZE_FILE, "w") as f:
            f.write(f"{width},{height}")
        print(f"Consolog: L∆∞u k√≠ch th∆∞·ªõc c·ª≠a s·ªï: {width}x{height}")
    except Exception as e:
        print(f"Consolog [ERROR]: L·ªói l∆∞u k√≠ch th∆∞·ªõc c·ª≠a s·ªï: {e}")

def load_marker_config():
    config = {"dont_ask": False}
    if os.path.exists(MARKER_CONFIG_FILE):
        try:
            with open(MARKER_CONFIG_FILE, "r", encoding="utf-8") as f:
                line = f.read().strip()
                if line.lower() == "dont_ask=true":
                    config["dont_ask"] = True
        except Exception as e:
            print(f"Consolog [ERROR]: L·ªói ƒë·ªçc marker config: {e}")
    return config

def save_marker_config(config):
    try:
        with open(MARKER_CONFIG_FILE, "w", encoding="utf-8") as f:
            f.write("dont_ask=true" if config.get("dont_ask") else "dont_ask=false")
    except Exception as e:
        print(f"Consolog [ERROR]: L·ªói ghi marker config: {e}")

def select_language():
    lang_window = tk.Tk()
    lang_window.title(languages["en"]["lang_select_title"])
    center_window(lang_window, 400, 200)

    tk.Label(lang_window, text="Select Language / ÈÄâÊã©ËØ≠Ë®Ä / Ch·ªçn ng√¥n ng·ªØ:", font=("Arial Unicode MS", 12)).pack(pady=10)
    language_var = tk.StringVar(value="en")

    for code in ["vi", "en", "zh"]:
        tk.Radiobutton(
            lang_window,
            text=languages[code]["lang_" + code],
            variable=language_var,
            value=code,
            font=("Arial Unicode MS", 10)
        ).pack(anchor="w", padx=20)

    tk.Label(lang_window, text=VERSION_INFO, font=("Arial Unicode MS", 8)).pack(pady=5)
    tk.Button(lang_window, text="OK", command=lambda: set_language(language_var, lang_window), font=("Arial Unicode MS", 10)).pack(pady=10)

    lang_window.mainloop()

def set_language(language_var, window):
    global lang
    selected = language_var.get()
    lang = languages[selected]
    window.destroy()
    # Consolog: Sau khi ch·ªçn ng√¥n ng·ªØ, kh·ªüi t·∫°o giao di·ªán ch√≠nh.
    print("Consolog: Ng∆∞·ªùi d√πng ch·ªçn ng√¥n ng·ªØ xong, kh·ªüi t·∫°o giao di·ªán ch√≠nh.")
    init_main_ui()

# NEW: H√†m hi·ªÉn th·ªã splash screen (loading) ngay khi ·ª©ng d·ª•ng kh·ªüi ch·∫°y.
# ƒêi·ªÅu ch·ªânh: Thay v√¨ delay c·ªë ƒë·ªãnh, ch√∫ng ta d√πng m·ªôt thread ƒë·ªÉ load tool (c√°c qu√° tr√¨nh c·∫ßn load) v√† splash s·∫Ω xu·∫•t hi·ªán trong ƒë√∫ng th·ªùi gian load.
def show_splash_screen():
    splash = tk.Tk()
    splash.overrideredirect(True)
    width = 300
    height = 150
    screen_width = splash.winfo_screenwidth()
    screen_height = splash.winfo_screenheight()
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2
    splash.geometry(f"{width}x{height}+{x}+{y}")
    label = tk.Label(splash, text="Loading, please wait...", font=("Arial Unicode MS", 12))
    label.pack(expand=True)
    print("Consolog: Splash screen hi·ªÉn th·ªã.")

    # Start thread load tool ƒë·ªÉ bi·∫øt th·ªùi gian load th·ª±c
    threading.Thread(target=lambda: load_tool(splash), daemon=True).start()
    splash.mainloop()

# NEW: H√†m load_tool() th·ª±c hi·ªán c√°c b∆∞·ªõc load c·∫ßn thi·∫øt.
def load_tool(splash):
    start_time = time.time()
    print("Consolog: B·∫Øt ƒë·∫ßu load tool...")
    # ·ªû ƒë√¢y b·∫°n thay th·∫ø b·∫±ng c√°c h√†m load th·ª±c s·ª± c·ªßa tool, v√≠ d·ª•:
    time.sleep(5)  # Gi·∫£ l·∫≠p th·ªùi gian load tool, v√≠ d·ª• 5 gi√¢y.
    end_time = time.time()
    print("Consolog: Tool ƒë√£ load xong sau {:.2f} gi√¢y.".format(end_time - start_time))
    # Sau khi load xong, g·ªçi finish_splash ƒë·ªÉ chuy·ªÉn giao di·ªán.
    splash.after(0, lambda: finish_splash(splash))

# NEW: H√†m finish_splash() s·∫Ω ƒë√≥ng splash v√† g·ªçi giao di·ªán ch·ªçn ng√¥n ng·ªØ.
def finish_splash(splash):
    splash.destroy()
    print("Consolog: Splash screen k·∫øt th√∫c, hi·ªÉn th·ªã giao di·ªán ch·ªçn ng√¥n ng·ªØ.")
    select_language()

##################################################
# Consolog: B·∫ÆT ƒê·∫¶U H√ÄM init_main_ui (m√†n h√¨nh ch√≠nh)
##################################################
def init_main_ui():
    global root, entry_path, text_stats, text_logged, text_summary, text_log, telegram_path_entry

    # T·∫°o c·ª≠a s·ªï ch√≠nh
    root = tk.Tk()
    root.title(lang["title"])
    center_window(root, 650, 800)

    default_font = tkFont.nametofont("TkDefaultFont")
    default_font.configure(family="Arial Unicode MS", size=10)
    root.option_add("*Font", default_font)

    threading.Thread(target=check_for_updates, daemon=True).start()

    label_title = tk.Label(root, text=lang["title"], font=("Arial Unicode MS", 14, "bold"))
    label_title.pack(pady=10)

    frame_path = tk.Frame(root)
    frame_path.pack(pady=5)

    entry_path = tk.Entry(frame_path, width=50)
    entry_path.pack(side=tk.LEFT, padx=5)

    btn_browse = tk.Button(frame_path, text=lang["choose_folder"], command=browse_folder)
    btn_browse.pack(side=tk.LEFT)

    frame_telegram_path = tk.Frame(root)
    frame_telegram_path.pack(pady=5)

    tk.Label(frame_telegram_path, text=lang["telegram_path_label"]).pack(side=tk.LEFT, padx=5)
    telegram_path_entry = tk.Entry(frame_telegram_path, width=50)
    telegram_path_entry.insert(0, DEFAULT_TELEGRAM_PATH)
    telegram_path_entry.pack(side=tk.LEFT, padx=5)

    btn_save = tk.Button(root, text=lang["save_path"], command=save_path, width=20)
    btn_save.pack(pady=5)

    frame_buttons = tk.Frame(root)
    frame_buttons.pack(pady=5)

    def warn_telethon():
        warning_msg = (
            "„ÄêTi·∫øng Vi·ªát„Äë: Ch·ª©c nƒÉng Telethon hi·ªán ƒëang trong giai ƒëo·∫°n th·ª≠ nghi·ªám. Vui l√≤ng l∆∞u √Ω r·∫±ng c√≥ th·ªÉ x·∫£y ra m·ªôt s·ªë s·ª± c·ªë ho·∫∑c ho·∫°t ƒë·ªông kh√¥ng ·ªïn ƒë·ªãnh.\n"
            "„ÄêEnglish„Äë: The Telethon feature is currently experimental. Please note that it may encounter issues or operate unpredictably.\n"
            "„Äê‰∏≠Êñá„Äë: Telegram ÂäüËÉΩÁõÆÂâçÂ§Ñ‰∫éÂÆûÈ™åÈò∂ÊÆµÔºåËØ∑Ê≥®ÊÑèÂèØËÉΩÂ≠òÂú®‰∏Ä‰∫õÈóÆÈ¢òÊàñ‰∏çÁ®≥ÂÆöÁöÑÊÉÖÂÜµ„ÄÇ"
        )
        messagebox.showwarning("C·∫£nh b√°o", warning_msg)
        login_all_accounts()

    btn_login_all = tk.Button(frame_buttons, text=lang["login_all"], command=warn_telethon, width=18)
    btn_copy = tk.Button(frame_buttons, text=lang["copy_telegram"], command=lambda: copy_telegram_portable(), width=18)
    btn_open = tk.Button(frame_buttons, text=lang["open_telegram"], command=lambda: open_telegram_copies(), width=18)

    btn_login_all.grid(row=0, column=0, padx=5, pady=5)
    btn_copy.grid(row=0, column=1, padx=5, pady=5)
    btn_open.grid(row=0, column=2, padx=5, pady=5)

    btn_close = tk.Button(frame_buttons, text=lang["close_telegram"], command=close_all_telegram_threaded, width=18)
    btn_arrange = tk.Button(frame_buttons, text=lang["arrange_telegram"], command=lambda: arrange_telegram_windows(arrange_width, arrange_height), width=18)
    btn_auto_it = tk.Button(frame_buttons, text=lang["auto_it"], command=warn_auto_it, width=18)

    btn_close.grid(row=1, column=0, padx=5, pady=5)
    btn_arrange.grid(row=1, column=1, padx=5, pady=5)
    btn_auto_it.grid(row=1, column=2, padx=5, pady=5)

    btn_check_live = tk.Button(frame_buttons, text=lang["check_live"], command=lambda: warn_check_live(), width=18)
    btn_setting = tk.Button(frame_buttons, text="‚öôÔ∏è Setting", command=open_settings, width=18)
    btn_update = tk.Button(frame_buttons, text=lang["check_update"], command=check_for_updates, width=18)

    btn_check_live.grid(row=2, column=0, padx=5, pady=5)
    btn_setting.grid(row=2, column=1, padx=5, pady=5)
    btn_update.grid(row=2, column=2, padx=5, pady=5)

    frame_stats = tk.Frame(root)
    frame_stats.pack(pady=10)
    label_stats = tk.Label(frame_stats, text=lang["stats_label"])
    label_stats.pack()
    text_stats = tk.Text(frame_stats, width=70, height=10)
    text_stats.pack()

    frame_summary = tk.Frame(root)
    frame_summary.pack(pady=10)
    text_summary = tk.Text(frame_summary, width=70, height=5)
    frame_summary.pack_forget()

    frame_logged = tk.Frame(root)
    frame_logged.pack(pady=10)
    global text_logged
    text_logged = tk.Text(frame_logged, width=70, height=5)
    frame_logged.pack_forget()

    frame_log = tk.Frame(root)
    frame_log.pack(pady=10)
    label_log = tk.Label(frame_log, text=lang["log_label"])
    label_log.pack()
    global text_log
    text_log = tk.Text(frame_log, width=70, height=10)
    text_log.pack()

    saved_path = load_path()
    if saved_path:
        entry_path.insert(0, saved_path)
        update_stats()
        update_logged()

    footer = tk.Label(root, text=VERSION_INFO, font=("Arial Unicode MS", 8))
    footer.pack(side="bottom", fill="x", pady=5)

    root.protocol("WM_DELETE_WINDOW", on_closing)

    # Consolog: ƒê√£ t√°ch ph·∫ßn mini chat. D∆∞·ªõi ƒë√¢y import v√† g·ªçi h√†m t·ª´ mini_chat.py
    print("Consolog: Moved mini chat code to mini_chat.py")
    from mini_chat import set_root, set_mini_chat_globals, create_mini_chat, create_mini_chatgpt, start_mini_chat_monitor

    set_root(root)
    set_mini_chat_globals(CHATGPT_API_KEY, TRANSLATION_ONLY, DEFAULT_TARGET_LANG)

    create_mini_chat()
    print("Consolog: Mini Chat l·ªõn ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o t·ª± ƒë·ªông.")
    create_mini_chatgpt()
    print("Consolog: Widget Mini Chat nh·ªè (g·∫Øn v√†o c·ª≠a s·ªï Telegram) ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o t·ª± ƒë·ªông.")
    start_mini_chat_monitor()

    print("Consolog: Giao di·ªán ch√≠nh ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
    root.mainloop()

# Ch·∫°y kh·ªüi t·∫°o ‚Äì B·∫Øt ƒë·∫ßu b·∫±ng hi·ªÉn th·ªã splash screen tr∆∞·ªõc khi ch·ªçn ng√¥n ng·ªØ.
print("Consolog: ·ª®ng d·ª•ng kh·ªüi ch·∫°y, hi·ªÉn th·ªã splash screen ƒë·ªÉ load tool theo th·ªùi gian load th·ª±c.")
show_splash_screen()
